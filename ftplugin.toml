hook_add = '''
  " Python
  let g:python_highlight_all = 1
  " python.vim
  let python_highlight_all = g:python_highlight_all

  " Ruby
  let g:no_ruby_maps = 1
  let g:ruby_path = [] " to fail in default gf

  " Vim
  let g:vimsyntax_noerror = 1
  let g:vim_indent_cont = 0

  " Java
  let g:java_highlight_functions = 'style'
  let g:java_highlight_all = 1
  let g:java_highlight_debug = 1
  let g:java_allow_cpp_keywords = 1
  let g:java_space_errors = 1
  let g:java_highlight_functions = 1

  " Markdown
  " http://mattn.kaoriya.net/software/vim/20140523124903.htm
  let g:markdown_fenced_languages = [
    \  'coffee',
    \  'css',
    \  'erb=eruby',
    \  'javascript',
    \  'js=javascript',
    \  'json=javascript',
    \  'ruby',
    \  'sass',
    \  'xml',
    \  'vim',
    \]

  " Tex
  let g:tex_flavor = 'latex'

  " Folding
  let g:tex_fold_enabled = 1
  let g:xml_syntax_folding = 1
  let g:php_folding = 1
  let g:perl_fold = 1
'''


[ftplugin]

_ = '''
  setl formatoptions=jlqMB
    " http://vim-jp.org/vimdoc-ja/change.html#fo-table
    " + jlqMB
    " - tcrovbmw
    "   an12
    " setl formatoptions+=Bnqlj
    " j コメントを結合する時に可能であればコメントリーダーを削除する
    " l 挿入モードでは長い行は折り返されない。
    " q gqでコメントを結合
    " B マルチバイト文字同士の結合で間に空白を挿入しない
    " M マルチバイト文字同士の結合で前後に空白を挿入しない 'B' < 'M'

    " b:undo_ftpluginに '| |'があると起動時に:printされる
    au FileType * let b:undo_ftplugin = substitute(b:undo_ftplugin, '|\s*|', '|', 'g')
'''

c = '''
  SetTab 4
  setl commentstring=//\ %s
'''

go = '''
  SetTab 4
  setl noexpandtab
  highlight default link goErr WarningMsg
  match goErr /\<err\>/
'''

help = '''
  setl nofoldenable
  setl foldcolumn=0
  setl number
'''

html = '''
  setlocal includeexpr=substitute(v:fname,'^\\/','','')
  setlocal path+=./;/
'''

neosnippet = '''
  set noexpandtab
'''

python = '''
  SetTab 4
  setl foldmethod=indent

  if has('*textobj#user#map')
    call textobj#user#map('python', {
          \   'class': {
          \     'select-a': '<buffer>aM',
          \     'select-i': '<buffer>iM',
          \   },
          \   'function': {
          \     'select-a': '<buffer>im',
          \     'select-i': '<buffer>im',
          \   }
          \ })
  endif
'''

qfreplace = '''
  setl nofoldenable
  setl nobuflisted
  nnoremap <buffer>q <c-w>q
'''

ruby = '''
  setl omnifunc=
  setl iskeyword+=?
'''

sh = '''
  let b:match_words = '\%(;\s*\|^\s*\)\@<=if\>:\%(;\s*\|^\s*\)\@<=fi\>,' .
    \ '\%(;\s*\|^\s*\)\@<=\%(for\|while\)\>:\%(;\s*\|^\s*\)\@<=done\>' .
    \ '\%(;\s*\|^\s*\)\@<=case\>:\%(;\s*\|^\s*\)\@<=esac\>'
'''

toml = '''
  syntax sync minlines=500
'''

text = '''
  setl nobreakindent wrap
'''

vim = '''
  if 5000 < line('$')
    syntax sync minlines=200
  endif

  setl keywordprg=:help
  setl iskeyword-=:
  setl iskeyword-=#

  let b:match_ignorecase = 0
  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name") =~? "comment\\|string\\|vimSynReg\\|vimSet\\|vimFuncName"'
  let b:match_words =
    \ '\<fu\%[nction]\>:\<endf\%[unction]\>,' .
    \ '\<\(wh\%[ile]\|for\)\>:\<end\(w\%[hile]\|fo\%[r]\)\>,' .
    \ '\<if\>:\<en\%[dif]\>,' .
    \ '\<try\>:\<endt\%[ry]\>,' .
    \ '\<aug\%[roup]\s\+\%(END\>\)\@!\S:\<aug\%[roup]\s\+END\>,' .
    \ '(:)'

  nnoremap <silent><buffer>gd :call vimrc#goto_vim_func_def()<cr>
  nmap <buffer>[m [[
  nmap <buffer>]m ][
  nmap <buffer>[M []
  nmap <buffer>]M ]]
'''

zsh = '''
  setl iskeyword-=$
  let b:match_words='(:),{:},[:],\<if\>:\<fi\>,\<case\>:^\s*([^)]*):\<esac\>,\<\%(select\|while\|until\|repeat\|for\%(each\)\=\)\>:\<done\>'
'''
