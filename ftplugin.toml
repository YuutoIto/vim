hook_add = '''
  " Python
  let g:python_highlight_all = 1
  " python.vim
  let python_highlight_all = g:python_highlight_all

  " Ruby
  let g:no_ruby_maps = 1
  let g:ruby_path = [] " Force fail in default gf

  " Vim
  " let g:vimsyntax_noerror = 1

  " Java
  let g:java_highlight_functions = 'style'
  let g:java_highlight_all = 1
  let g:java_highlight_debug = 1
  let g:java_allow_cpp_keywords = 1
  let g:java_space_errors = 1
  let g:java_highlight_functions = 1

  " Markdown
  " http://mattn.kaoriya.net/software/vim/20140523124903.htm
  let g:markdown_fenced_languages = [
    \  'coffee',
    \  'css',
    \  'erb=eruby',
    \  'javascript',
    \  'js=javascript',
    \  'json=javascript',
    \  'ruby',
    \  'sass',
    \  'xml',
    \  'vim',
    \]

  " Tex
  let g:tex_flavor = 'latex'

  " Folding
  let g:tex_fold_enabled = 1
  let g:xml_syntax_folding = 1
  let g:php_folding = 1
  let g:perl_fold = 1
'''


[ftplugin]

_ = '''
  setl formatoptions=lqMB
    " http://vim-jp.org/vimdoc-ja/change.html#fo-table
    " + lqMB
    " - jtcrovbmw
    "   an12
    " setl formatoptions+=Bnqlj
    " j コメントを結合する時に可能であればコメントリーダーを削除する
    " l 挿入モードでは長い行は折り返されない。
    " q gqでコメントを結合
    " B マルチバイト文字同士の結合で間に空白を挿入しない
    " M マルチバイト文字同士の結合で前後に空白を挿入しない 'B' < 'M'

    " b:undo_ftpluginに '| |'があると起動時に:printされる

  au myac FileType * if exists('b:undo_ftplugin') | let b:undo_ftplugin = substitute(b:undo_ftplugin, '|\s*|', '|', 'g') | endif

  if has('linebreak')
    " optsetでやればよさそう
    au myac FileType * let &l:breakindentopt = 'shift:' . &l:tabstop
  endif
'''

arduino = '''
  SetTab 4
  setl commentstring=//\ %s
  let b:format_cmd = 'ClangFormat'
'''

c = '''
  SetTab 4
  setl commentstring=//\ %s
  let b:format_cmd = 'ClangFormat'
'''

cpp = '''
  SetTab 4
  setl commentstring=//\ %s
  let b:format_cmd = 'ClangFormat'
'''

casl2 = '''
  SetTab 8
  setl commentstring=;\ %s
'''

css = '''
  setlocal iskeyword+=-
'''

diff = '''
  setl foldmethod=diff
  setl foldcolumn=0
'''

gitconfig = '''
  setl noexpandtab
'''

gitrebase = '''
  noremap <silent><buffer><nowait>gp :Pick<CR>
  noremap <silent><buffer><nowait>gr :Reword<CR>
  noremap <silent><buffer><nowait>ge :Edit<CR>
  noremap <silent><buffer><nowait>gs :Squash<CR>
  noremap <silent><buffer><nowait>gf :Fixup<CR>
'''

gitcommit = '''
  setl spell
  setl nofoldenable
  setl foldcolumn=0
  setl textwidth=0
  " after InsertEnter for committia.vim
  au InsertEnter * setl lazyredraw
  nnoremap <silent><buffer>a gga
  nnoremap <silent><buffer>A ggA
  nnoremap <silent><buffer>i ggi
  nnoremap <silent><buffer>I ggI
  nnoremap <silent><buffer>c ggc
  nnoremap <silent><buffer>d ggd
  goto
'''

go = '''
  SetTab 4
  setl noexpandtab
  " setl foldmethod=syntax
  highlight default link goErr WarningMsg
  au myac Syntax <buffer> syn keyword goErr err

  nnoremap <buffer><silent>,li :<c-u>Unite go/import -start-insert<cr>
  nnoremap <buffer><silent>,lb :<c-u>QuickRun -mode n go/build<cr>
  nnoremap <buffer><silent>,lt :<c-u>QuickRun -mode n go/test<cr>
  nnoremap <buffer><silent>,lr :<c-u>GoRename<cr>

  let b:format_cmd = 'Fmt'
  let b:tags_cmd = 'gotags -sort -silent -f .tags *.go'

  if getline(1) =~ 'main'
    let b:watchdogs_checker_type = 'watchdogs_checker/go_vet'
  endif
'''

rust = '''
  setl foldmethod=syntax
  let b:format_cmd = 'RustFmt'
'''

help = '''
  setl nofoldenable
  setl foldcolumn=0
  setl number
  setl iskeyword+=-

  if &l:buftype !=# 'help'
    SetTab 8
    setl list noexpandtab textwidth=78
    if exists('+colorcolumn')
      setlocal colorcolumn=+1
    endif
    if has('conceal')
      setlocal conceallevel=2 concealcursor=c
    endif
  endif
'''

html = '''
  setlocal includeexpr=substitute(v:fname,'^\\/','','')
  setlocal path+=./;/
  SetTab 4
'''

java = '''
  SetTab 4
'''

javascript = '''
  setl foldmethod=syntax
  setl commentstring=//\ %s
  nnoremap <buffer><silent>,lr :<c-u>TernRename<cr>
  " SetTab 4

  " let b:format_cmd = ''
  " let b:tags_cmd = ''
'''

json = '''
  command! AlignJSON %!jq '.'
  let b:format_cmd = 'AlignJSON'
'''

markdown = '''
  SetTab 2
  setl wrap
'''

neosnippet = '''
  set noexpandtab
  set fdm=marker
'''

python = '''
  SetTab 4
  " setl foldmethod=indent
  setl nosmartindent

  if has('*textobj#user#map')
    call textobj#user#map('python', {
          \   'class': {
          \     'select-a': '<buffer>aM',
          \     'select-i': '<buffer>iM',
          \   },
          \   'function': {
          \     'select-a': '<buffer>im',
          \     'select-i': '<buffer>im',
          \   }
          \ })
  endif
'''

qfreplace = '''
  setl nofoldenable
  setl nobuflisted
  nnoremap <buffer>q <c-w>q
'''

review = '''
  setl wrap
'''

ruby = '''
  setl fdm=syntax
  setl omnifunc=
  setl iskeyword+=?
  setl wrap

  command! YardGen !yard doc %
  nnoremap <f3> :YardGen<cr>

  " vim-ruby-refactoring
  nnoremap <buffer>,lap :RAddParameter<cr>
  nnoremap <buffer>,lcp :RConvertPostConditional<cr>
  nnoremap <buffer>,lit :RInlineTemp<cr>

  vnoremap <buffer>,lrl :RRenameLocalVariable<cr>
  vnoremap <buffer>,lri :RRenameInstanceVariable<cr>

  nnoremap <buffer>,lel :RExtractLet<cr>
  vnoremap <buffer>,lec :RExtractConstant<cr>
  vnoremap <buffer>,lev :RExtractLocalVariable<cr>
  vnoremap <buffer>,lem :RExtractMethod<cr>

  " nnoremap <buffer>,lm :Unite rails/model -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lv :Unite rails/view -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lc :Unite rails/controller -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lr :Unite rails/route -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lh :Unite rails/helper -start-insert -default-action=open<cr>
  " " nnoremap <buffer>,l :unite rails/config -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lsp :Unite rails/spec -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lge :Unite rails/generate -start-insert -default-action=open<cr>
  " nnoremap <buffer>,lsc :Unite rails/schema -start-insert -default-action=open<cr>

  let g:ruby_no_comment_fold = 1

  let b:match_ignorecase = 0
  let b:match_words =
        \ '\<\%(if\|unless\|case\|while\|until\|for\|do\|class\|module\|def\|begin\)\>=\@!' .
        \ ':' .
        \ '\%(^\|[^.\:@$]\)\@<=\<end\:\@!\>' .
        \ ',{:},\[:\],(:)'
  let b:match_skip =
        \ "synIDattr(synID(line('.'),col('.'),0),'name') =~ '" .
        \ "\\<ruby\\%(String\\|StringDelimiter\\|ASCIICode\\|Escape\\|" .
        \ "Regexp\\|RegexpDelimiter\\|" .
        \ "Interpolation\\|NoInterpolation\\|Comment\\|Documentation\\|" .
        \ "ConditionalModifier\\|RepeatModifier\\|OptionalDo\\|" .
        \ "Function\\|BlockArgument\\|KeywordAsMethod\\|ClassVariable\\|" .
        \ "InstanceVariable\\|GlobalVariable\\|Symbol\\)\\>'"
'''

sh = '''
  let b:match_words = '\%(;\s*\|^\s*\)\@<=if\>:\%(;\s*\|^\s*\)\@<=fi\>,' .
    \ '\%(;\s*\|^\s*\)\@<=\%(for\|while\)\>:\%(;\s*\|^\s*\)\@<=done\>' .
    \ '\%(;\s*\|^\s*\)\@<=case\>:\%(;\s*\|^\s*\)\@<=esac\>'
'''

toml = '''
  syntax sync minlines=300
  let b:watchdogs_checker_type = 'watchdogs_checker/null'

  if expand('%:p') =~# expand('~/.vim')
    let b:context_filetype_filetypes = {
      \ 'toml': [{
      \   'start': '\s*=\s*\(' . "'\\{3}" . '\|"""\)',
      \   'end': '\1', 'filetype': 'vim',
      \ },],
      \ }
  endif
'''

text = '''
  setl wrap
'''

terraform = '''
  setl commentstring=#%s
'''

vim = '''
  if 5000 < line('$')
    syntax sync minlines=300
  endif

  setl fdm=marker
  setl keywordprg=:help
  setl iskeyword-=:
  setl iskeyword-=#

  let g:vim_indent_cont = &l:tabstop

  let b:match_words =
    \ '\<fu\%[nction]\>:\<endf\%[unction]\>,' .
    \ '\<\(wh\%[ile]\|for\)\>:\<end\(w\%[hile]\|fo\%[r]\)\>,' .
    \ '\<if\>:\<en\%[dif]\>,' .
    \ '\<try\>:\<endt\%[ry]\>,' .
    \ '\<aug\%[roup]\s\+\%(END\>\)\@!\S:\<aug\%[roup]\s\+END\>,' .
    \ '(:)'

  nnoremap <silent><buffer>gd :call vimrc#goto_vim_func_def()<cr>
  nmap <buffer>[m [[
  nmap <buffer>]m ][
  nmap <buffer>[M []
  nmap <buffer>]M ]]
'''

vue = '''
  SetTab 2
'''

zsh = '''
  setl iskeyword-=$
  setl iskeyword+=-
  let b:match_words='(:),{:},[:],\<if\>:\<fi\>,\<case\>:^\s*([^)]*):\<esac\>,\<\%(select\|while\|until\|repeat\|for\%(each\)\=\)\>:\<done\>'
'''

dockerfile = '''
  function! s:head(str)
    let col = col('.')
    let head = matchstr(getline('.'), '\c^\s*\%(ONBUILD\s\+\)\?')
    let col -= len(head)
    if col - 2 < len(a:str)
      return toupper(a:str)
    endif
    return a:str
  endfunction

  for s:instruction in ['from', 'maintainer', 'run', 'cmd', 'label',
      \ 'expose', 'env', 'add', 'copy', 'entrypoint', 'volume', 'user',
      \ 'workdir', 'arg', 'onbuild', 'stopsignal', 'healthcheck', 'shell',]

    execute 'inoreabbrev <buffer><expr>' s:instruction
      \ printf('<SID>head(%s)', string(s:instruction))
  endfor
'''

make = '''
  SetTab 4
  set noexpandtab
'''

yaml = '''
  setl cursorcolumn
'''

sshconfig = '''
  setl foldmethod=marker
  setl foldlevelstart=0
  setl foldlevel=0
'''
