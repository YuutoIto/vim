[[plugins]]
repo = 'Shougo/dein.vim'
# rtp = ''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# [[plugins]]
# repo = 'Shougo/deol.nvim'


#unite

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = 'source ~/.vim/rc/unite.rc.vim'
hook_post_source = '''
  call unite#custom#default_action("source/vimpatches/*", "openbuf")
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'tacroe/unite-mark'
on_source = 'unite.vim'

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'unite.vim'
on_path = '.*'
on_event = 'TextYankPost'

[[plugins]] # variable
repo = 'thinca/vim-editvar'
on_source = 'unite.vim'
on_cmd = 'Editvar'
on_func = 'editvar#open'

[[plugins]]
repo = 'osyo-manga/unite-fold'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-highlight'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-quickrun_config'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'
on_source = 'unite.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti'
on_source = 'unite.vim'

[[plugins]]
repo = 'Kocha/vim-unite-tig'
on_source = 'unite.vim'

# [[plugins]]
# repo = 'osyo-manga/unite-airline_themes'
# on_source = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = 'unite.vim'

[[plugins]]
repo = 'pasela/unite-webcolorname'
on_source = 'unite.vim'

[[plugins]]
repo = 'MaryHal/unite-unicode'
on_source = 'unite.vim'

[[plugins]]
repo = 'rhysd/unite-go-import.vim'
on_source = 'unite.vim'


#view

# [[plugins]]
# repo = 'vim-scripts/Changed'
# repo = 'kyouryuukunn/vim-changed'

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_add = '''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_member_variable_highlight = 1
  let g:cpp_experimental_simple_template_highlight = 1
  let g:cpp_experimental_template_highlight = 1
  let g:cpp_concepts_highlight = 1
  " let c_no_curly_error=1
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
hook_add = '''
  let g:no_cecutil_maps = 1
'''

# [[plugins]]
# repo = 'bling/vim-airline'

# [[plugins]]
# repo = 'vim-airline/vim-airline-themes'
# depends = 'vim-airline'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/lightline.rc.vim'

[[plugins]]
repo = 'mgee/lightline-bufferline'
depends = 'lightline.vim'

[[plugins]]
repo = 'tyru/current-func-info.vim'

# [[plugins]]
# repo = 't9md/vim-ezbar'
# hook_add = 'source ~/.vim/rc/ezbar.rc.vim'


#action

[[plugins]]
repo = 'tyru/nextfile.vim'
hook_add = '''
  let g:nf_map_next         = ']f'
  let g:nf_map_previous     = '[f'
  let g:nf_include_dotfiles = 0
  let g:nf_ignore_dir       = 1
  let g:nf_open_command     = 'edit'
  let g:nf_loop_files       = 1
  let g:nf_ignore_ext       = []
'''

# [[plugins]]
# repo = 'LeafCage/yankround.vim'

[[plugins]]
repo = 'bfredl/nvim-miniyank'
hook_add = '''
  let g:miniyank_filename = $HOME . "/.vim/tmp/miniyank.mpack"
'''
hook_source = '''
  map p <Plug>(miniyank-autoput)
  map P <Plug>(miniyank-autoPut)
  map <c-n> <Plug>(miniyank-cycle)
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_post_source = 'source ~/.vim/rc/submode.rc.vim'
on_map = '<Plug>'

[[plugins]]
# vim-ambicmd
repo = 'tyru/vim-altercmd'
hook_post_source = 'source ~/.vim/rc/altercmd.rc.vim'

[[plugins]]
repo = 'kana/vim-repeat'
# repo = 'tpope/vim-repeat'
hook_add = '''
  let g:repeat_no_default_key_mappings = 1
  nmap . <Plug>(repeat-.)
'''

[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
  let g:foldCCtext_enable_autofdc_adjuster = 0
  " let g:foldCCtext_head = 'printf("%3d ", v:foldend - v:foldstart+1)'
  let g:foldCCtext_head = ''
  " let g:foldCCtext_tail = ''
'''

# [[plugins]]
# 謎挙動
# repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = ['<Plug>(niceblock-I)', '<Plug>(niceblock-gI)', '<Plug>(niceblock-A)']
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 't9md/vim-choosewin'

[[plugins]]
repo = 'bkad/CamelCaseMotion'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-']

[[plugins]]
repo = 'kana/vim-smartword'

[[plugins]]
repo = 'rhysd/clever-f.vim'
# repo = 'chrisbra/improvedft'      # can input many charactores
# repo = 'deris/vim-shot-f'      # show oneshot jump points

# [[plugins]]
# repo = 'matchit.zip'

[[plugins]] # speedy
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'taku-o/vim-vis'

[[plugins]]
repo = 'tyru/visualctrlg.vim'

# [[plugins]] # <c-o> <c-i> 既に別タブ|ウィンドウで開かれていたらそっちに飛ぶ
# # 位置保存のタイミングが微妙
# repo = 'osyo-manga/vim-milfeulle'
# hook_add = '''
#   nmap <c-o> <Plug>(milfeulle-prev)
#   nmap <c-i> <Plug>(milfeulle-next)
#   let g:milfeulle_default_kind = "window"
#   let g:milfeulle_default_jumper_name = "win_tab_bufnr_pos_line"
# '''


#search and replace

[[plugins]] # show search point on the command-line
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'haya14busa/incsearch-index.vim'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_post_source = '''
  if exists(':OverCommandLine') != 2
    return
  endif

  OverCommandLineNoremap <CR> <CR>
'''


#syntaxchecker

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_fix_on_save = 1

  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'

  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1

  let g:ale_open_list = 1
  let g:ale_keep_list_window_open = 1

  " let g:ale_lint_on_enter = 0
  " let g:ale_lint_on_text_changed = 'never'

  " Put this in vimrc or a plugin file of your own.
  " After this is configured, :ALEFix will try and fix your JS code with ESLint.
  let g:ale_fixers = {
    \   'ruby': ['ruby'],
    \   'vim': ['']
    \ }

  highlight clear ALEErrorSign
  highlight clear ALEWarningSign
'''

# [[plugins]]
# repo = 'scrooloose/syntastic.git'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['vim-quickrun', 'shabadou.vim', 'vim-hier', 'quickfixstatus', ]
if = 0
hook_add = '''
  let g:watchdogs_check_BufWritePost_enable = 1
  " let g:watchdogs_check_BufWritePost_enables = { 'vim' : 0, }
  let g:watchdogs_check_CursorHold_enable = 0
  let g:watchdogs_check_BufWritePost_enable_on_wq = 0

  " 連続して保存した場合、前のシンタックスチェックを停止する
  au myac BufWritePre * WatchdogsRunSweep

  command! ShowWatchDogsDefault CaptureWin PP g:watchdogs#default_config
  command! WatchdogsC89 let b:watchdogs_checker_type = 'watchdogs_checker/c89'
  command! DisableWatchdogs let b:watchdogs_checker_type = 'watchdogs_checker/null'

  au myac BufRead,BufNewFile ~/codes/jprog/* WatchdogsC89
'''

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]] # forked from pocke from cohama
repo = 'pocke/vim-hier'
if = 0
hook_add = '''
  let g:hier_highlight_group_qf = 'hier'
  " au myac ColorScheme * hi hier cterm=undercurl ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE gui=undercurl
  au myac ColorScheme * hi hier cterm=NONE ctermfg=255 ctermbg=197 guifg=#ffffff guibg=#ef0040 gui=NONE
  au myac InsertLeave * silent! HierUpdate
'''


#quickrun

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = 'source ~/.vim/rc/quickrun.rc.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

# [[plugins]]
# repo = 'KazuakiM/vim-qfstatusline'

[[plugins]]
repo = 'osyo-manga/quickrun-outputter-replace_region'

# [[plugins]]
# repo  = 'rhysd/quickrun-unite-quickfix-outputter'


#input

[[plugins]]
# repo = 'Shougo/neosnippet-snippets'
repo = 'uplus/neosnippet-snippets'


#deoplete neocomplete

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
hook_add = 'let g:deoplete#enable_at_startup = 1'
hook_source = 'source ~/.vim/rc/deoplete.rc.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "!has('nvim') && has('lua')"
hook_source = 'source ~/.vim/rc/complete.rc.vim'

[[plugins]]
repo = 'ujihisa/neco-look'
if = 1
on_i = 1

[[plugins]]
repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'Shougo/neopairs.vim'
# hook_add = '''
#   let g:neopairs#enable = 1
# '''

[[plugins]]
# repo = 'zchee/deoplete-clang'
repo = 'tweekmonster/deoplete-clang2'
if = 1
on_ft = ['c', 'cpp']
hook_source = '''
  let b:clang2_orig_maps = {}

  let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'
  let g:deoplete#sources#clang#std = { 'c': 'gnu11', 'cpp': 'c++1z' }
  " let g:deoplete#sources#clang#flags = ['-x', 'c++'] " libclang default compile flags
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
build = 'npm install -g tern'
on_ft = 'javascript'

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = 'go'
build = 'make'
hook_source = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#package_dot = 1
'''

# [[plugins]]
# # repo = 'fishbullet/deoplete-ruby'
# repo = 'Shougo/deoplete-rct'
# on_ft = 'ruby'

[[plugins]]
repo = 'uplus/deoplete-solargraph'
if = 0
on_i = 1
on_ft =  'ruby'

# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'


[[plugins]] # rust
repo = 'racer-rust/vim-racer'


[[plugins]] # haskell
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
# external_commands = 'ghc-mod'

[[plugins]]
repo = 'zchee/deoplete-zsh'

[[plugins]]
repo = 'fszymanski/deoplete-emoji'


#git

[[plugins]]
if = 0
repo = 'tpope/vim-fugitive'

[[plugins]]
# gitのdiffを行に表示
if = 0
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_enabled         = 1
  let g:gitgutter_signs           = 1
  " let g:gitgutter_sign_column_always = 1
  let g:gitgutter_highlight_lines = 0
  let g:gitgutter_map_keys        = 0
  let g:gitgutter_escape_grep     = 1
  " let g:gitgutter_diff_args = '-w'

  let g:gitgutter_sign_added    = '✚'
  let g:gitgutter_sign_modified = '≈'
  let g:gitgutter_sign_removed  = '✘'
  let g:gitgutter_sign_modified_removed = g:gitgutter_sign_modified . g:gitgutter_sign_removed
  " let g:gitgutter_sign_removed_first_line = '‾'

  command! Stage GitGutterStageHunk
  command! Revert GitGutterUndoHunk

  nmap [h <Plug>GitGutterPrevHunkzMzvzz
  nmap ]h <Plug>GitGutterNextHunkzMzvzz
  nmap ,gp <Plug>GitGutterPreviewHunk
  nmap ,gadd <Plug>GitGutterStageHunk
  nmap ,grev <Plug>GitGutterUndoHunk
  nmap ,gh :GitGutterLineHighlightsToggle<CR>
  " nmap ,gg :GitGutterSignsToggle<CR>
'''
hook_post_source = '''
  " if use vim-submode, cannot use mappings to move tab(gt gT).
  " TODO 動作してない気がする
  " くっそ重い
  " au! gitgutter TabEnter,BufEnter,CursorHold,CursorHoldI,FocusGained
'''

[[plugins]]
# git branch
repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'


#web

[[plugins]]
repo = 'mattn/webapi-vim'

# [[plugins]]
# repo = 'mattn/wwwrenderer-vim'

[[plugins]]
repo = 'thinca/vim-openbuf'


#tag and ref

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'

[[plugins]]
repo = 'mfumi/ref-dicts-en'


#operator

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]] # gr
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'

[[plugins]] # yank delete changeなどのblockwise版
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-operator-block'

[[plugins]]
repo = 'osyo-manga/vim-operator-block'
depends = 'vim-operator-user'

[[plugins]] # sa sd sr
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'

[[plugins]]
repo = 'osyo-manga/vim-operator-exec_command'
depends = 'vim-operator-user'


#textobj

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]] # e buffer
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

[[plugins]] # i
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

[[plugins]] # y syntax-highlight
repo = 'kana/vim-textobj-syntax'
depends = 'vim-textobj-user'

[[plugins]] # z
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'

[[plugins]] # L ignore last-char of current-line
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'

[[plugins]] # u
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'

[[plugins]] # w use it with CamelCaseMotion
repo = 'h1mesuke/textobj-wiw'
depends = 'vim-textobj-user'

[[plugins]] # c
repo = 'thinca/vim-textobj-comment'
depends = 'vim-textobj-user'

[[plugins]] # f{char} select a range between character
repo = 'thinca/vim-textobj-between'
depends = 'vim-textobj-user'

[[plugins]] # v last pasted textobj
repo = 'gilligan/textobj-lastpaste'
depends = 'vim-textobj-user'

[[plugins]] # b some block
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'

[[plugins]] # I A 連続したtextobjを矩形選択 ciw -> cIw
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-textobj-user'

[[plugins]] # Can make textobj by regex
repo = 'osyo-manga/vim-textobj-from_regexp'
depends = 'vim-textobj-user'

[[plugins]] # 複数のtextobjを一つにまとめる
repo = 'osyo-manga/vim-textobj-multitextobj'
depends = 'vim-textobj-user'

[[plugins]] # m
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'bps/vim-textobj-python'
depends = 'vim-textobj-user'
hook_add = 'let g:textobj_python_no_default_key_mappings = 1'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'thinca/vim-textobj-function-javascript'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kamichidu/vim-textobj-function-go'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'rbonvall/vim-textobj-latex'
depends = 'vim-textobj-user'
hook_add = 'let g:textobj_latex_no_default_key_mappings = 1'


#colorscheme

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'djjcast/mirodark'

[[plugins]] # 暗めの白
repo = 'vim-scripts/newspaper.vim'

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

[[plugins]]
repo = 'freeo/vim-kalisi'


#c cpp
[[plugins]]
repo = 'uplus/vim-clang-rename'
hook_add = '''
  au myac FileType c,cpp nmap <buffer><silent>,lr <Plug>(clang_rename-current)
'''


#go

[[plugins]] # Fmtしてもホールド維持
repo = 'vim-jp/vim-go-extra'
hook_add = '''
  let g:gofmt_command = 'goimports'
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  function! s:go_config() abort
    nnoremap <buffer><silent>gd :<c-u>call go#def#Jump('split')<cr>
  endfunction
  au myac FileType go call s:go_config()
  let g:go_def_mapping_enabled = 0
  let g:go_textobj_enabled = 0
  let g:go_doc_keywordprg_enabled = 1
  let g:go_fmt_autosave = 0
  let g:go_template_autocreate = 0
'''

# [[plugins]]
# repo = 'dgryski/vim-godef'


#haskell

[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = 'haskell'

[[plugins]]
# こっちのほうが色つく
repo = 'dag/vim2hs'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
if = 0
hook_add = '''
  let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
  let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
  let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
  let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
  let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
  let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
  let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
'''

#js

[[plugins]]
# syntax fold
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'ternjs/tern_for_vim'
hook_add = '''
  let tern#command = ['tern']
  let tern#arguments = ['--no-port-file']
  let g:tern_show_loc_after_rename = 0
  let g:tern_set_omni_function = 0
'''


#misc
[[plugins]]
repo = 'kana/vim-gf-user'
hook_add = '''
  let g:gf_user_no_default_key_mappings = 1
  nmap gft <Plug>(gf-user-<c-w>gF)
  nmap gfb <Plug>(gf-user-gF)
  nmap gfs <Plug>(gf-user-<c-w>F)
  " :verticalが上手く動かないから雑実装
  nmap gfv <Plug>(u10-vertical)<Plug>(gf-user-gF)
  " ftpluginで上書きを阻止するために必要
  nmap gf <Plug>(gf-user-gF)
  nmap gf<esc> <nop>

  au myac FileType ruby call gf#user#extend('gf#ext#ruby', 1000)
'''
hook_post_source = '''
  " call when built-in functions failed
  call gf#user#extend('gf#ext#newfile', 1900)
'''

[[plugins]] # jump to vim autoload functions
repo = 'sgur/vim-gf-autoload'

[[plugins]] # jump to vim function
repo = 'hujo/gf-user-vimfn'

# little slow
# [[plugins]]
# repo = 'pekepeke/vim-gf-ruby-require'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
if = "has('nvim')"
hook_add = '''
  let g:precious_enable_switchers = {
    \ 'eruby': {
    \   'setfiletype': 0,
    \ },
    \ 'markdown': {
    \   'setfiletype': 0,
    \ },
    \ 'vue': {
    \   'setfiletype': 0,
    \ },
    \}
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]] # ステータスにドキュメントをecho
repo = 'Shougo/echodoc'
on_event = 'CompleteDone'
hook_add = '''
  let g:echodoc_enable_at_startup = 1
'''

[[plugins]] # :PP! is same as :echomes
repo = 'thinca/vim-prettyprint'
hook_add = '''
  let g:prettyprint_string = ['raw'] " [] 'raw' 'split'
'''

[[plugins]]
repo = 'rhysd/wandbox-vim'
hook_add = '''
  nnoremap ,wb :<c-u>Wandbox<cr>
  let g:wandbox#default_compiler = get(g:, 'wandbox#default_compiler', {})
  let g:wandbox#default_compiler = {
    \ 'cpp': 'clang-head',
    \ }
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1

  let g:calendar_frame = 'default'
  let g:calendar_first_day = 'sunday'
'''

# [[plugins]]
# repo = 'thinca/vim-template'
# hook_add = '''
#   let g:template_basedir = '~/.vim/templates'
# '''

# [[plugins]] # Need reloadble vimrc
# repo = "mattn/benchvimrc-vim"

# [[plugins]]
# repo = 'Valodim/vim-zsh-completion'

# [[plugins]]
# repo = 'fweep/vim-zsh-path-completion'

[[plugins]]
repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'syngan/vim-vimlint'
depends = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'thinca/vim-themis'
