[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = ['snippet', 'neosnippet']
hook_add = '''
  let g:neosnippet#enable_snipmate_compatibility = 0
  let g:neosnippet#disable_runtime_snippets = { '_': 1 }
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
  let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#scope_aliases = {}
  let g:neosnippet#scope_aliases['ruby'] = 'ruby,ruby-rails'
  let g:neosnippet#scope_aliases['arduino'] = 'c'
  " let g:neosnippet#enable_auto_clear_markers = 1 " Don't work on multi lines

  " let g:neosnippet#enable_completed_snippet = 1
  " let g:neosnippet#enable_complete_done = 1

  " imap <expr><tab> pumvisible()? "\<c-n>" : neosnippet#jumpable()? "\<Plug>(neosnippet_jump)" : "\<tab>"
  imap <c-l> <Plug>(neosnippet_expand_or_jump)
  smap <c-l> <Plug>(neosnippet_expand_or_jump)
  xmap <c-l> <Plug>(neosnippet_jump)

  if has('conceal')
    " set conceallevel=2 concealcursor=niv
  endif
'''
hook_source = '''
  au myac InsertLeave * NeoSnippetClearMarkers
'''

# [[plugins]]
# repo = 'uplus/neosnippet-snippets'


[[plugins]] # ステータスにドキュメントをecho
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
# hook_add = '''
hook_source = '''
  " let g:echodoc_enable_at_startup = 1
  let g:echodoc#type = 'virtual'
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_event = 'InsertEnter'
hook_source = '''
  source ~/.vim/rc/deoplete.rc.vim
  call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "!has('nvim') && has('lua')"
hook_add = '''
  let g:loaded_deoplete = 1
  let g:neocomplete#enable_at_startup = 1
  let g:neopairs#enable = 1

  inoremap <expr><s-tab> pumvisible()? "\<c-p>" : "\<s-tab>"
  " inoremap <expr><space> pumvisible()? "\<c-y>" : "\<space>"
  " inoremap <expr><c-h> neocomplete#smart_close_popup() . "\<c-h>"
  " inoremap <expr><bs> neocomplete#smart_close_popup() . "\<c-h>"
'''
hook_source = 'source ~/.vim/rc/complete.rc.vim'



## sources

[[plugins]]
if = 0
repo = 'ujihisa/neco-look'
on_event = 'InsertEnter'


[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]] # It has "file/include" source
repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'Shougo/neopairs.vim'
# hook_add = '''
#   let g:neopairs#enable = 1
# '''

[[plugins]]
repo = 'zchee/deoplete-clang'
# repo = 'tweekmonster/deoplete-clang2'
if = 'executable("clang")'
on_ft = ['c', 'cpp']
hook_source = '''
  let b:clang2_orig_maps = {}

  let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'
  let g:deoplete#sources#clang#std = { 'c': 'gnu11', 'cpp': 'c++1z' }
  " let g:deoplete#sources#clang#flags = ['-x', 'c++'] " libclang default compile flags
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
build = 'npm install -g tern'
on_ft = 'javascript'


[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = ['javascript', 'vue', 'html']
hook_add = '''
  let tern#command = ['tern']
  let tern#arguments = ['--no-port-file']
  let g:tern_show_loc_after_rename = 0
  let g:tern_set_omni_function = 0
'''


[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'deoplete-plugins/deoplete-go'
on_ft = 'go'
build = 'make'
hook_source = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#package_dot = 1
'''

# [[plugins]]
# # repo = 'fishbullet/deoplete-ruby'
# repo = 'Shougo/deoplete-rct'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
# on_ft =  'ruby'

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'

[[plugins]] # haskell
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
# external_commands = 'ghc-mod'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
on_ft = ['gitcommit', 'markdown', 'text']

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = 'terraform'
hook_add = '''
  " (Optional) Default: 0, enable(1)/disable(0) plugin's keymapping
  let g:terraform_completion_keys = 0

  " (Optional) Default: 1, enable(1)/disable(0) terraform module registry completion
  let g:terraform_registry_module_completion = 1
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_event = 'InsertEnter'
hook_add = '''
  let g:LanguageClient_loadSettings = 1
  let g:LanguageClient_settingsPath = expand('~/.vim/rc/lsp-settings.json')

  let g:LanguageClient_waitOutputTimeout = 200
  let g:LanguageClient_changeThrottle = 0.5
  " let g:LanguageClient_selectionUI = "location-list"

  let g:LanguageClient_loggingLevel = 'DEBUG'
  let g:LanguageClient_loggingFile = expand("~/.vim/tmp/LC.log")
  let g:LanguageClient_trace = 'verbose' " off messages verbose

  let g:LanguageClient_rootMarkers = {
    \ 'rust': [],
    \ }
  "    \ 'javascript': ['project.json'],
  "    \ 'rust': ['Cargo.toml'],
'''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_event = 'InsertEnter'
build = './install.sh'


[[plugins]]
if = 0
repo = 'Shougo/deoplete-lsp'
hook_source = '''
  " https://github.com/neovim/neovim/pull/6856
  call lsp#server#add('python', 'pyls')
  call lsp#server#add('rust', ['rustup', 'run', 'stable', 'rls'])
  " For go-langserver
  call lsp#server#add('go', [expand('$GOPATH/bin/go-langserver'), '-format-tool', 'gofmt', '-lint-tool', 'golint', '-gocodecompletion'])

  " For bingo
  " https://github.com/saibing/bingo
  call lsp#server#add('go', ['bingo', '--mode', 'stdio', '--logfile', '/tmp/lspserver.log', '--trace', '--pprof', ':6060'])
'''
