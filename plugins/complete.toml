[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = ['snippet', 'neosnippet']
hook_source = '''
  au myac InsertLeave * NeoSnippetClearMarkers
'''

[[plugins]]
repo = 'uplus/neosnippet-snippets'


[[plugins]] # ステータスにドキュメントをecho
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
# hook_add = '''
hook_source = '''
  " let g:echodoc_enable_at_startup = 1
  let g:echodoc#type = 'virtual'
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_event = 'InsertEnter'
# hook_add = 'let g:deoplete#enable_at_startup = 1'
hook_source = '''
  source ~/.vim/rc/deoplete.rc.vim
  call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "!has('nvim') && has('lua')"
hook_source = 'source ~/.vim/rc/complete.rc.vim'



## sources

[[plugins]]
repo = 'ujihisa/neco-look'
on_i = 1
if = 0

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]] # It has "file/include" source
repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'Shougo/neopairs.vim'
# hook_add = '''
#   let g:neopairs#enable = 1
# '''

[[plugins]]
repo = 'zchee/deoplete-clang'
# repo = 'tweekmonster/deoplete-clang2'
if = 'executable("clang")'
on_ft = ['c', 'cpp']
hook_source = '''
  let b:clang2_orig_maps = {}

  let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'
  let g:deoplete#sources#clang#std = { 'c': 'gnu11', 'cpp': 'c++1z' }
  " let g:deoplete#sources#clang#flags = ['-x', 'c++'] " libclang default compile flags
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
build = 'npm install -g tern'
on_ft = 'javascript'

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
build = 'make'
hook_source = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#package_dot = 1
'''

# [[plugins]]
# # repo = 'fishbullet/deoplete-ruby'
# repo = 'Shougo/deoplete-rct'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
# on_ft =  'ruby'

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'

[[plugins]] # haskell
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
# external_commands = 'ghc-mod'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
on_ft = ['gitcommit', 'markdown', 'text']

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = 'terraform'
hook_add = '''
  " (Optional) Default: 0, enable(1)/disable(0) plugin's keymapping
  let g:terraform_completion_keys = 0

  " (Optional) Default: 1, enable(1)/disable(0) terraform module registry completion
  let g:terraform_registry_module_completion = 1
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
  let g:LanguageClient_loadSettings = 1
  let g:LanguageClient_settingsPath = expand('~/.vim/rc/lsp-settings.json')

  let g:LanguageClient_waitOutputTimeout = 20
  let g:LanguageClient_changeThrottle = 0.5
  " let g:LanguageClient_selectionUI = "location-list"

  let g:LanguageClient_loggingLevel = 'DEBUG'
  let g:LanguageClient_loggingFile = expand("~/.vim/tmp/LC.log")
  " let g:LanguageClient_trace = 'verbose' " off messages verbose

  let g:LanguageClient_rootMarkers = {
    \ 'rust': [],
    \ }
  "    \ 'javascript': ['project.json'],
  "    \ 'rust': ['Cargo.toml'],
'''
