## base

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['context_filetype.vim']
on_event = ['InsertEnter']
on_ft = ['snippet', 'neosnippet']
hook_add = '''
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
  let g:neosnippet#disable_runtime_snippets = { '_': 1 }
  let g:neosnippet#enable_completed_snippet = 0
  let g:neosnippet#enable_complete_done = 0
  let g:neosnippet#expand_word_boundary = 1

  let g:neosnippet#scope_aliases = {
    \ 'ruby': 'ruby,ruby-rails',
    \ 'arduino': 'c',
    \ 'typescriptreact': 'react',
    \ }

  if has('conceal')
    " set conceallevel=2 concealcursor=niv
  endif

  au myac InsertLeave * NeoSnippetClearMarkers
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
hook_add = '''
  " 補完メニューが開いていてもエンターで改行する
  let g:lexima_nvim_accept_pum_with_enter = 0
'''
hook_post_source = 'source ~/.vim/rc/lexima.rc.vim'

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
  " let g:echodoc_enable_at_startup = 1
  let g:echodoc#type = 'virtual'
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
if = "has('nvim')"
on_event = ['InsertEnter']
hook_source = '''
  source ~/.vim/rc/deoplete.rc.vim
  call deoplete#enable()
'''


## sources

[[plugins]]
repo = 'mattn/googlesuggest-complete-vim'
on_event = ['InsertEnter']
hook_add = '''
  command! EnableGoogleSuggest set completefunc=googlesuggest#Complete
  EnableGoogleSuggest
'''

[[plugins]]
if = 0
repo = 'ujihisa/neco-look'
on_event = 'InsertEnter'


[[plugins]] # vim
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'zchee/deoplete-clang'
# repo = 'tweekmonster/deoplete-clang2'
if = 'executable("clang")'
on_ft = ['c', 'cpp']
hook_source = '''
  let b:clang2_orig_maps = {}

  let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'
  let g:deoplete#sources#clang#std = { 'c': 'gnu11', 'cpp': 'c++1z' }
  " let g:deoplete#sources#clang#flags = ['-x', 'c++'] " libclang default compile flags
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-go'
on_ft = 'go'
hook_post_update = 'make'
hook_source = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#package_dot = 1
'''

[[plugins]] # haskell
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
# external_commands = 'ghc-mod'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'junegunn/vim-emoji'
on_func = 'emoji#'
hook_add = '''
  command! EnableEmoji set completefunc=emoji#complete
'''

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
on_ft = ['gitcommit', 'markdown', 'text']

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = 'terraform'
hook_add = '''
  " (Optional) Default: 0, enable(1)/disable(0) plugin's keymapping
  let g:terraform_completion_keys = 0

  " (Optional) Default: 1, enable(1)/disable(0) terraform module registry completion
  let g:terraform_registry_module_completion = 1
'''


## Language Clients

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
on_event = 'InsertEnter'
hook_post_update = './install.sh'
hook_add = '''
  let g:LanguageClient_loadSettings = 1
  let g:LanguageClient_settingsPath = expand('~/.vim/rc/lsp-settings.json')
  let g:LanguageClient_hasSnippetSupport = 0

  let g:LanguageClient_useVirtualText = 'All'
  " let g:LanguageClient_virtualTextPrefix = ''

  let g:LanguageClient_diagnosticsEnable = 0
  let g:LanguageClient_diagnosticsList = 'Disabled'

  " let g:LanguageClient_waitOutputTimeout = 20
  " let g:LanguageClient_changeThrottle = 0.5
  " let g:LanguageClient_selectionUI = 'location-list'

  " let g:LanguageClient_loggingLevel = 'DEBUG'
  " let g:LanguageClient_loggingFile = expand("~/.vim/tmp/LC.log")
  " let g:LanguageClient_trace = 'verbose' " off messages verbose

  let g:LanguageClient_rootMarkers = {
    \ 'rust': ['Cargo.toml'],
    \ 'ruby': ['Gemfile'],
    \ 'python': ['Pipfile'],
    \ 'javascript': ['package.json'],
    \ 'typescript': ['package.json', 'tsconfig.json'],
    \ 'typescriptreact': ['package.json', 'tsconfig.json'],
    \ }

  let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ 'ruby': ['solargraph', 'stdio'],
    \ 'python': ['pyls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'typescriptreact': ['javascript-typescript-stdio'],
    \ }
    "\ 'typescript': ['typescript-language-server', '--stdio'],
    "\ 'typescriptreact': ['typescript-language-server', '--stdio'],
    " \ 'ruby': ['orbaclerun', 'file-server'],
    " \ 'rust': ['rustup', 'run', 'stable', 'rls'],

    function LC_maps()
      if has_key(g:LanguageClient_serverCommands, &filetype)
        nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
        nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<cr>
        " nnoremap <buffer> <silent> <f2> :call LanguageClient#textDocument_rename()<cr>
      endif
    endfunction

    au myac FileType * call LC_maps()
'''

[[plugins]]
if = 0
repo = 'tbodt/deoplete-tabnine'
on_event = 'InsertEnter'
hook_post_update = './install.sh'


[[plugins]]
if = 0
repo = 'Shougo/deoplete-lsp'
hook_source = '''
  " https://github.com/neovim/neovim/pull/6856
  call lsp#server#add('python', 'pyls')
  call lsp#server#add('rust', ['rustup', 'run', 'stable', 'rls'])
  " For go-langserver
  call lsp#server#add('go', [expand('$GOPATH/bin/go-langserver'), '-format-tool', 'gofmt', '-lint-tool', 'golint', '-gocodecompletion'])

  " For bingo
  " https://github.com/saibing/bingo
  call lsp#server#add('go', ['bingo', '--mode', 'stdio', '--logfile', '/tmp/lspserver.log', '--trace', '--pprof', ':6060'])
'''
