[[plugins]]
repo = 'mattn/googlesuggest-complete-vim'
hook_add = '''
  command! EnableGoogleSuggest set completefunc=googlesuggest#Complete
  EnableGoogleSuggest
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
  let g:copilot_no_maps = v:true
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
# lazy = 1
# on_event = ['InsertEnter']
# on_ft = ['snippet', 'neosnippet']
hook_add = '''
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
  let g:neosnippet#disable_runtime_snippets = { '_': 1 }
  let g:neosnippet#enable_completed_snippet = 0
  let g:neosnippet#enable_auto_clear_markers = 0

  " let g:neosnippet#enable_conceal_markers = 1
  " let g:neosnippet#conceal_char = '|'

  " CompleteDoneで展開する
  let g:neosnippet#enable_complete_done = 0
  " 単語境界でも展開する
  let g:neosnippet#expand_word_boundary = 1

  let g:neosnippet#scope_aliases = {
    \ 'ruby': 'ruby,ruby-rails',
    \ 'arduino': 'c',
    \ 'typescript': 'typescriptreact',
    \ }

  " どのみち保存前に消される
  " au myac InsertLeave * NeoSnippetClearMarkers
'''

[[plugins]]
repo = 'cohama/lexima.vim'
# lazy = 1
# on_event = ['InsertEnter']
hook_add = '''
  " 補完メニューが開いていてもエンターで改行する
  let g:lexima_accept_pum_with_enter = 0
  " let g:lexima_enable_endwise_rules = 0
  let g:lexima_ctrlh_as_backspace = 0
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

# https://github.com/topics/ddc-vim
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
# deinは遅延読み込み前後でau FileTypeの差分があると &ft=&ft する
# いろいろ再実されてインサートモードに入るのが重くなるので起動のみ遅延させる
# lazy = 1
# on_event = ['InsertEnter']
hook_source = '''
  source ~/.vim/rc/ddc.rc.vim

  au myac InsertEnter * ++once ++nested call s:insert_enter()

  function! s:insert_enter() abort
    " VimEnterではなくInsertEnterで読み込む
    source ~/.vim/rc/lexima.rc.vim
    source ~/.vim/rc/input.rc.vim
  endfunction
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
# hook_add = 'au myac InsertEnter * ++once ++nested call signature_help#enable()'
hook_post_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
# hook_add = 'au myac InsertEnter * ++once ++nested call popup_preview#enable()'
hook_add = '''
  let g:popup_preview_config = {
    \ 'delay': 100,
    \ }
'''
hook_post_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-source-copilot'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'
# cargo install mocword
# https://github.com/high-moctane/mocword-data/releases/download/eng20200217/mocword.sqlite.gz

[[plugins]]
repo = 'Shougo/ddc-source-shell-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']

# [[plugins]]
# repo = 'tani/ddc-source-path'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lua'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rtags'
on_ft = ['c', 'cpp']

# matcher, sorter, convert

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'
