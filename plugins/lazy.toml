# view

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = ['open-browser.vim']
on_ft = 'markdown'
hook_add = '''
  " " 設定されてると非同期にならない
  " if executable('firefox')
  "   let g:previm_open_cmd='firefox'
  " endif
'''

[[plugins]]
if = 0
repo = 'Yggdroot/indentLine'
on_cmd = ['IndentLinesToggle', 'LeadingSpaceToggle']
hook_add = '''
  let g:indentLine_enabled              = 0
  let g:indentLine_faster               = 1
  let g:indentLine_showFirstIndentLevel = 1
  let g:indentLine_color_term           = 208
  nmap <silent>\tl :IndentLinesToggle<CR>
'''


# colors

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = ['<Plug>(quickhl', '<Plug>(operator-quickhl']
hook_add = '''
  let g:quickhl_manual_enable_at_startup = 1
  let g:quickhl_cword_enable_at_startup  = 0
  let g:quickhl_tag_enable_at_startup    = 0
  let g:quickhl_manual_keywords          = [] " Can use List and Dictionary

  nmap gh <Plug>(quickhl-manual-this)
  nmap gH <Plug>(quickhl-manual-this-whole-word)
  nmap gl <Plug>(operator-quickhl-manual-this-motion)<Plug>(textobj-line-i)
  nmap gm <Plug>(operator-quickhl-manual-this-motion)
  xmap gh <Plug>(quickhl-manual-this)

  nmap \hm <Plug>(quickhl-manual-reset)
  xmap \hm <Plug>(quickhl-manual-reset)
  nmap \ht <Plug>(quickhl-tag-toggle)
  nmap \hc <Plug>(quickhl-cword-toggle)

  let g:quickhl_manual_hl_priority = 100

  " red purple slate blue blue green yellow orange
  let g:quickhl_manual_colors = [
        \ 'term=reverse ctermfg=232 ctermbg=160  guifg=#080808 guibg=#d70000',
        \ 'term=reverse ctermfg=232 ctermbg=128  guifg=#080808 guibg=#af00d7',
        \ 'term=reverse ctermfg=232 ctermbg=63   guifg=#080808 guibg=#5f5fff',
        \ 'term=reverse ctermfg=232 ctermbg=33   guifg=#080808 guibg=#0087ff',
        \ 'term=reverse ctermfg=232 ctermbg=34   guifg=#080808 guibg=#00af00',
        \ 'term=reverse ctermfg=232 ctermbg=226  guifg=#080808 guibg=#ffff00',
        \ 'term=reverse ctermfg=232 ctermbg=202  guifg=#080808 guibg=#ff5f00',
        \ 'term=reverse ctermfg=0   ctermbg=207  guifg=#080808 guibg=#ff5fff',
        \ 'term=reverse ctermfg=0   ctermbg=201  guifg=#080808 guibg=#ff00ff',
        \ 'term=reverse ctermfg=0   ctermbg=117  guifg=#080808 guibg=#87d7ff',
        \ 'term=reverse ctermfg=0   ctermbg=75   guifg=#080808 guibg=#5fafff',
        \ 'term=reverse ctermfg=0   ctermbg=43   guifg=#080808 guibg=#00d7af',
        \ 'term=reverse ctermfg=0   ctermbg=190  guifg=#080808 guibg=#d7ff00',
        \ 'term=reverse ctermfg=0   ctermbg=69   guifg=#080808 guibg=#5f87ff',
        \ 'term=reverse ctermfg=0   ctermbg=85   guifg=#080808 guibg=#5fffaf',
        \ 'term=reverse ctermfg=0   ctermbg=183  guifg=#080808 guibg=#d7afff',
        \ ]
'''

[[plugins]]
repo = 'oblitum/rainbow'
on_cmd = ['RainbowToggle', 'RainbowLoad']
hook_add = '''
  let g:rainbow_ctermfgs = ['blue', 'green', 'yellow', 'magenta', 'red', 'darkmagenta', 'darkblue', 'darkgreen', 'darkcyan']
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_cmd = ['ColorClear', 'ColorToggle', 'ColorHighlight']
hook_add = '''
  let g:colorizer_nomap   = 1
  let g:colorizer_startup = 0
  nmap \hz <Plug>Colorizer
'''


# action

[[plugins]]
repo = 'tyru/caw.vim'
depends = ['context_filetype.vim', 'vim-operator-user']
on_map = '<Plug>(caw'
hook_add = '''
  let g:caw_no_default_keymappings = 1
  let g:caw_operator_keymappings = 0
  " let g:caw_dollarpos_sp_left = ' '
  " let g:caw_dollarpos_startinsert = 1

  " basic mappings, 回数指定は gc2j など
  nmap gc <Plug>(caw:hatpos:toggle:operator)
  nmap gcc <Plug>(caw:hatpos:toggle)
  nmap g<space> gcc
  xmap g<space> gc

  nmap gcj <Plug>(caw:hatpos:toggle)j<PLug>(caw:hatpos:toggle)k
  nmap gck <Plug>(caw:hatpos:toggle)k<PLug>(caw:hatpos:toggle)j
  " append tail comment, Aじゃないとobjectのaと被る
  nmap gcA <Plug>(caw:dollarpos:toggle)

  " yank and comment out
  xmap <Plug>(comment-toggle-yank) ygv<Plug>(caw:hatpos:toggle)
  xmap gy <Plug>(comment-toggle-yank)
  xmap gc <Plug>(caw:hatpos:toggle)
  nmap gyy yy<Plug>(caw:hatpos:toggle)
  nmap <expr>gy operator#exec_command#mapexpr_v_keymapping("\<Plug>(comment-toggle-yank)")

  " paste and comment out
  nmap gcp p<Plug>(select-pasted)gc
'''

[[plugins]]
repo = 'chrisbra/unicode.vim'
on_cmd = ['Digraphs', 'SearchUnicode', 'UnicodeName', 'UnicodeTable', 'DownloadUnicode']
on_map = [['i', '<Plug>(DigraphComplete)', '<Plug>(UnicodeComplete)', '<Plug>(UnicodeGA)', '<Plug>(MakeDigraph)', '<Plug>(UnicodeSwapCompleteName)']]
hook_add = '''
  imap <c-x><c-g> <Plug>(DigraphComplete)
  imap <c-x><c-z> <Plug>(UnicodeComplete)
'''

[[plugins]] # contain textobj
repo = 'AndrewRadev/sideways.vim'
on_map = ['<Plug>Sideways']
on_cmd = ['SidewaysLeft', 'SidewaysRight', 'SidewaysJumpLeft', 'SidewaysJumpRight']
hook_add = '''
  nmap <space>l <Plug>SidewaysRight
  nmap <space>h <Plug>SidewaysLeft
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = '''
  let g:linediff_buffer_type = 'scratch'
  " let g:linediff_first_buffer_command  = 'new'
  " let g:linediff_further_buffer_command = 'vertical new'
  " let g:linediff_indent = 1

  nnoremap <silent>gsd  :Linediff<cr>
  xnoremap <silent>gsd  :Linediff<cr>
  au myac User LinediffBufferReady nnoremap <silent><buffer>q :quit<cr>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  nmap sl <Plug>(EasyAlign)
  vmap sl <Plug>(EasyAlign)
  nmap <Space>sl <Plug>(LiveEasyAlign)
  vmap <Space>sl <Plug>(LiveEasyAlign)
'''
hook_source = 'source ~/.vim/rc/easyalign.rc.vim'

[[plugins]]
repo = 'uplus/vim-clurin'
on_map = ['<Plug>(clurin-next)', '<Plug>(clurin-prev)']
hook_source = 'source ~/.vim/rc/clurin.rc.vim'
# mapping in submode.rc.vim
hook_add = '''
  nmap <silent><Plug>(clurin-undojoin) <Plug>(u10-undojoin)<Plug>(clurin-next)
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = ['<Plug>(niceblock-I)', '<Plug>(niceblock-gI)', '<Plug>(niceblock-A)']
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>(jplus'
hook_add = '''
  nmap J <Plug>(jplus)
  xmap J <Plug>(jplus)

  " 任意の1文字+両端に空白を挿入して結合を行う
  nmap gJ <Plug>(jplus-getchar)
  xmap gJ <Plug>(jplus-getchar)

  " 複数文字を入力したい場合
  nmap <Space>gJ <Plug>(jplus-input)
  vmap <Space>gJ <Plug>(jplus-input)

  " ,での結合にスペースを挿入
  let g:jplus#input_config = {
    \ ',' : {'delimiter_format' : '%d '}
    \}

  " let g:jplus#config = {
  "  \ 'dockerfile': {
  "  \   'left_matchstr_pattern': '.*\ze\s\+\\\s*$',
  "  \ },
  "  \ }
  " ^\s*\\\s*\zs.*\|\s*\zs.*
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = ['<Plug>(expand_region_expand)', '<Plug>(expand_region_shrink)']
hook_add = '''
  xmap v <Plug>(expand_region_expand)
  xmap gm <Plug>(expand_region_shrink)
'''

[[plugins]]
repo     = 'dhruvasagar/vim-table-mode'
on_map   = ['<Plug>(table-mode', '\tm', '\tt']
on_cmd   = ['TableModeToggle', 'Tableize']
hook_add = '''
  let g:table_mode_map_prefix = '\t'
  let g:table_mode_corner = '|'
  xmap \tT <Plug>(table-mode-tableize-delimiter)
  " let g:table_mode_disable_mappings = 1

  let g:table_mode_motion_up_map = ''
  let g:table_mode_motion_down_map = ''
  let g:table_mode_motion_left_map = ''
  let g:table_mode_motion_right_map = ''
'''

[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = ['<Plug>SpeedDatingUp', '<Plug>SpeedDatingDown']
hook_add = '''
  let g:speeddating_no_mappings = 1
  nmap <c-a> <Plug>SpeedDatingUp
  nmap <c-x> <Plug>SpeedDatingDown
  xmap <c-a> <Plug>SpeedDatingUp
  xmap <c-x> <Plug>SpeedDatingDown
'''
hook_post_source = '''
  " SpeedDatingFormat! %v
  " SpeedDatingFormat! %^v " Roman numerals
  let g:speeddating_formats = get(g:, 'speeddating_formats', [])
  let g:speeddating_formats += [['%v', 0, 1]]
  let g:speeddating_formats += [['%^v', 0, 1]]
'''


# search and replace

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = ['OverCommandLine', 'OverCommandLineNoremap']
hook_add = '''
    " let g:over_enable_auto_nohlsearch = 1
    let g:over_enable_cmd_window = 0
    " let g:over_command_line_prompt = "> "

    " 再帰する
    let g:over_command_line_key_mappings = {
      \ '@' : { 'key': '\@', 'noremap': 1 }
      \ }
    " <Plug>(over-cmdline-scroll-y)     |CTRL-y| 相当
    " <Plug>(over-cmdline-scroll-u)     |CTRL-u| 相当
    " <Plug>(over-cmdline-scroll-f)     |CTRL-f| 相当
    " <Plug>(over-cmdline-scroll-e)     |CTRL-e| 相当
    " <Plug>(over-cmdline-scroll-d)     |CTRL-d| 相当
    " <Plug>(over-cmdline-scroll-b)     |CTRL-b| 相当

    nnoremap ss :OverCommandLine %s/\v<CR>
    nnoremap sw :OverCommandLine %s/\v<<C-r><C-w>>/<CR>
    nnoremap sW :OverCommandLine %s/\v<<C-r><C-a>>/<CR>
    xnoremap ss :OverCommandLine s/\v<CR>
    xnoremap sw :OverCommandLine s/\v<<C-r><C-w>>/<CR>
    xnoremap sW :OverCommandLine s/\v<<C-r><C-a>>/<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-hopping'
on_map = '<Plug>(hopping'
hook_add = '''
  let g:hopping#prompt     = 'Input:> '
  nmap \H <Plug>(hopping-start)
  " let g:hopping#keymapping = {
  "   \ "\<C-n>" : "<Over>(hopping-next)",
  "   \ "\<C-p>" : "<Over>(hopping-prev)",
  "   \ "\<C-u>" : "<Over>(scroll-u)",
  "   \ "\<C-d>" : "<Over>(scroll-d)",
  "   \}
'''

[[plugins]] # quickfixの各行を編集、反映できる
repo = 'thinca/vim-qfreplace'
on_ft = ['denite', 'qf']
hook_add = '''
  au myac FileType qf nnoremap <buffer>r :<C-u>Qfreplace<CR>
'''

[[plugins]]
repo = 'thinca/vim-partedit'
on_cmd = 'Partedit'
hook_add = '''
  vmap <silent>,, :Partedit<cr>
  let g:partedit#opener = 'botright new'
  let g:partedit#filetype = 'narrow'
  let g:partedit#auto_prefix = 0
'''

[[plugins]]
repo = 'tyru/visualctrlg.vim'
on_map = ['<Plug>(visualctrlg-briefly)', '<Plug>(visualctrlg-verbosely)']


#c cpp
[[plugins]]
repo = 'uplus/vim-clang-rename'
on_ft = ['c', 'cpp', 'arduino']
hook_add = '''
  au myac FileType c,cpp nmap <buffer><silent>,lr <Plug>(clang_rename-current)
'''


#ruby

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

# [[plugins]]
# repo = 'todesking/ruby_hl_lvar.vim'
# if = "!has('nvim')"
# on_ft = 'ruby'
# hook_add = '''
#   let g:ruby_hl_lvar_hl_group = 'rubyLocalVariable'
#   au myac VimEnter,ColorScheme * hi rubyLocalVariable ctermfg=38 guifg=#00afd7
# '''

[[plugins]]
# plugin/に関数定義が沢山ある
repo = 'killphi/vim-ruby-refactoring'
on_ft = 'ruby'
hook_add = '''
  let g:ruby_refactoring_map_keys = 0
'''


#python

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'
hook_add = '''
  let g:SimpylFold_docstring_preview = 0
  let g:SimpylFold_fold_docstring = 1
  let g:SimpylFold_fold_import = 0
'''


#git

[[plugins]]
# git log
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']
on_map = '<Plug>(agit-'

[[plugins]]
# git add -p
repo = 'AndrewRadev/gapply.vim'
on_cmd = 'Gapply'
on_func = 'gapply#Start()'

[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = 'gitcommit'
hook_add = '''
  let g:committia_open_only_vim_starting = 1
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " Scroll the diff window from insert mode
    imap <buffer><m-k> <Plug>(committia-scroll-diff-up-half)
    imap <buffer><m-j> <Plug>(committia-scroll-diff-down-half)
  endfunction
'''

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista']
on_func = 'gista#'
hook_add = '''
  let g:gista#client#default_username = 'uplus'
  let g:gista#command#post#default_public = 0
  let g:gista#command#post#allow_empty_description = 1
'''

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'webapi-vim'
on_cmd = 'Gist'
hook_source = '''
  let g:gist_clip_command = 'xclip -selection clipboard'
'''


#web

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = [ 'OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch' ]
on_map = [ '<Plug>(openbrowser-open)', '<Plug>(openbrowser-search)', '<Plug>(openbrowser-smart-search)', '<Plug>(openbrowser-wwwsearch)' ]
on_func = ['openbrowser#open', 'openbrowser#search', 'openbrowser#smart_search']
hook_add = '''
  nnoremap <expr><Plug>(openbrowser-wwwsearch) <SID>www_search('')
  nnoremap <expr><Plug>(openbrowser-smart-open) <SID>smart_open()

  nmap gss <Plug>(openbrowser-wwwsearch)
  xmap gsc <Plug>(openbrowser-smart-search)
  nmap gsc <Plug>(openbrowser-smart-open)

  function! s:smart_open() abort
    let l:iskeyword_save = &iskeyword
    setl iskeyword=@,@-@,-,_,:,;,.,#,%,/,48-57

    try
      let l:str = expand('<cword>')
      let l:str = substitute(l:str, '[,.]$', '', '')
      call openbrowser#smart_search(l:str)
    finally
      let &l:iskeyword = l:iskeyword_save
    endtry
  endfunction

  function! s:www_search(query) abort
    if a:query !=# ''
      let l:search_word = a:query
    else
      let l:search_word = input('Please input search word: ')
    endif

    if l:search_word !=# ''
      let l:search_word = substitute(l:search_word, "'", "''", 'g')
      call openbrowser#search(l:search_word)
    endif
  endfunction
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq' ]

[[plugins]]
repo = 'mattn/excitetranslate-vim'
on_cmd = ['ExciteTranslate', 'Trans']
hook_add = '''
  xnoremap gst :ExciteTranslate<CR>
'''
hook_source = '''
  command! -range Trans :<line1>,<line2>:ExciteTranslate

  autocmd BufNewFile ==Translate==* call s:trans_config()
  function! s:trans_config() abort
    setl nobuflisted
    nnoremap q :bd<CR>
  endfunction
'''


#tags and ref

# [[plugins]] # Ruby/Bundlerに対応して、必要最低限のtagsのみを非同期生成
# # 非同期生成とRuby/Bundler対応は直行してる
# repo = 'alpaca-tc/alpaca_tags'
# depends = 'vimproc.vim'
# on_cmd = ['AlpacaTagsBundle', 'AlpacaTagsUpdate', 'AlpacaTagsEnable', 'AlpacaTagsSet', 'AlpacaTagsCleanCache', 'AlpacaTagsDisable', 'AlpacaTagsKillProcess', 'AlpacaTagsProcessStatus']
# hook_add = '''
#   let g:alpaca_tags#config = {
#         \    '_' : '-R --sort=yes',
#         \    'ruby': '--languages=+Ruby',
#         \ }
#
#   augroup AlpacaTags
#     autocmd!
#     " au myac FileWritePost,BufWritePost *       AlpacaTagsUpdate -style
#     " au myac FileWritePost,BufWritePost Gemfile AlpacaTagsUpdateBundle
#     " au myac FileReadPost,BufEnter      *       AlpacaTagsSet
#   augroup END
# '''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['Tagbar', 'TagbarToggle', 'TagbarOpen', 'TagbarOpenAutoClose', 'TagbarShowTag', 'TagbarCurrentTag', 'TagbarGetTypeConfig', 'TagbarDebug', 'TagbarTogglePause']
on_func = 'tagbar#'
hook_add = '''
  nnoremap <silent>,t :<c-u>TagbarOpen<cr>

  let g:tagbar_type_go = {
    \   'ctagstype': 'go',
    \   'kinds': [
    \     'p:package',
    \     'i:imports:1',
    \     'c:constants',
    \     'v:variables',
    \     't:types',
    \     'n:interfaces',
    \     'w:fields',
    \     'e:embedded',
    \     'm:methods',
    \     'r:constructor',
    \     'f:functions'
    \   ],
    \   'sro': '.',
    \   'kind2scope': {
    \     't' : 'ctype',
    \     'n' : 'ntype'
    \   },
    \   'scope2kind': {
    \     'ctype' : 't',
    \     'ntype' : 'n'
    \   },
    \   'ctagsbin': 'gotags',
    \   'ctagsargs': '-sort -silent'
    \ }
'''


# operator

[[plugins]] # se evaluate textobj as expression of lambda of ruby
repo = 'rhysd/vim-operator-evalruby'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-evalruby)'

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c', 'cpp', 'arduino']
hook_add = '''
  let g:clang_format#command = 'clang-format'
  let g:clang_format#detect_style_file = 1
'''

[[plugins]] # <space>j <space>k
repo = 'osyo-manga/vim-operator-jump_side'
depends = 'vim-operator-user'
on_map  = '<Plug>(operator-jump'


#misc

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_add = '''
  " ]fなどが使えない
  " let g:suda_smart_edit = 1
'''

[[plugins]]
repo = 'tpope/vim-characterize'
on_map = '<Plug>(characterize)'
hook_add = '''
  nmap gaa <Plug>(characterize)
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'
on_cmd = ['SudoWrite', 'SudoRead']
hook_add = '''
  command! Sw silent SudoWrite %
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle', 'UndotreeShow']
hook_add = '''
  nnoremap ,ug :UndotreeToggle<cr>

  let g:undotree_WindowLayout = 3
  " let g:undotree_CustomUndotreeCmd = 'vertical 32 new'
  let g:undotree_SplitWidth = 50 " float2nr(winwidth(0)*0.24)
  let g:undotree_DiffpanelHeight = 30
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_ShortIndicators = 1

  function g:Undotree_CustomMap()
    nmap <buffer> k <plug>UndotreeNextState
    nmap <buffer> j <plug>UndotreePreviousState
    nmap <buffer> K <plug>UndotreeNextSavedState
    nmap <buffer> J <plug>UndotreePreviousSavedState

    " <plug>UndotreeHelp
    " <plug>UndotreeClose
    " <plug>UndotreeFocusTarget
    " <plug>UndotreeClearHistory
    " <plug>UndotreeTimestampToggle
    " <plug>UndotreeDiffToggle
    " <plug>UndotreeNextState
    " <plug>UndotreePreviousState
    " <plug>UndotreeNextSavedState
    " <plug>UndotreePreviousSavedState
    " <plug>UndotreeRedo
    " <plug>UndotreeUndo
    " <plug>UndotreeEnter
  endfunc
'''

[[plugins]]
repo = 'rbtnn/vimconsole.vim'
on_cmd = ['VimConsoleOpen', 'VimConsoleToggle', 'VimConsoleLog']
on_map = '<Plug>(vimconsole_'
on_func = 'vimconsole#log'
hook_add = '''
  let g:vimconsole#auto_redraw = 1
  let g:vimconsole#height = 10
  let g:vimconsole#hooks = {}
  command! -nargs=1 ConsoleLog call vimconsole#log(<args>)
  command! Log VimConsoleOpen

  " function! g:vimconsole#hooks.on_logged(context)
  "   call vimconsole#winopen()
  " endfunction
'''

[[plugins]] # To convert {range} mutually HTML and Entity.
repo = 'inotom/str2htmlentity'
on_cmd = ['Str2HtmlEntity', 'Entity2HtmlString']

[[plugins]]
repo = 'osyo-manga/vim-stargate'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'tkhren/vim-fake'
on_cmd = ['FakeSubstitute']
on_func = 'fake#'

[[plugins]]
repo = 'uplus/vim-fakearray'
on_map = [['i', '<Plug>(fakearray)']]
on_func = ['fakearray#get', 'fakearray#prompt', 'fakearray#val']
hook_add = '''
  " <c-/>a
  imap a <Plug>(fakearray)
  imap <c-a> <Plug>(fakearray)
'''

[[plugins]] # Display unicode.
repo = 'osyo-manga/vim-hideout'
on_cmd = ['HideoutOn']

[[plugins]]
repo = 'lervag/vim-latex'
on_ft = ['tex', 'plaintex']

[[plugins]]
repo = 'xuhdev/vim-latex-live-preview'
on_ft = ['tex', 'plaintex']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xhtml', 'css']
hook_add = '''
  let g:user_emmet_mode = 'iv'
  let g:user_emmet_expandabbr_key = '<c-y><c-y>'
'''

[[plugins]]
repo = 'rbtnn/game_engine.vim'
on_cmd = 'GameEngineStartGame'

[[plugins]]
repo = 'rbtnn/mario.vim'
depends = 'game_engine.vim'
on_cmd = 'Mario'

[[plugins]]
repo = 'rbtnn/puyo.vim'
depends = 'game_engine.vim'
on_cmd = 'Puyo'

[[plugins]]
repo = 'johngrib/vim-game-code-break'
on_cmd = ['VimGameCodeBreak', 'CodeBreak']
hook_add = '''
  command! CodeBreak VimGameCodeBreak
'''

# [[plugins]]
# # コマのサイズはハードコーディング
# repo = 'rbtnn/reversi.vim'
# depends = 'game_engine.vim'
# on_cmd = 'Reversi'

[[plugins]]
repo = 'thinca/vim-threes'
on_cmd = ['ThreesStart', 'ThreesShowRecord']
hook_add = '''
  let g:threes#data_directory = expand('~/.vim/tmp')
  let g:threes#start_with_higher_tile = 1
  command! Threes ThreesStart
'''

[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'

[[plugins]] # Markdownのリストをツリーにする
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'

[[plugins]]
repo = 'rhysd/try-colorscheme.vim'
on_cmd = 'TryColorscheme'

[[plugins]]
repo = 'uplus/colorsel.vim'
on_cmd = 'ColorSel'

[[plugins]]
repo = 'thinca/vim-scall'
on_func = ['Scall', 'scall#']
hook_add = '''
  let g:scall_function_name = 'Scall'
'''

[[plugins]]
repo = 'mattn/httpstatus-vim'
on_cmd = ['HttpStatus', 'CtrlPHttpStatus']

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = ['HelpfulVersion']
on_ft = ['vim', 'help']

[[plugins]]
repo = 'tweekmonster/dyslexic.vim'
on_cmd = ['DyslexicTracking', 'DyslexicOff']
on_map = ['<Plug>(Dyslexic)']
hook_add = '''
  let g:dyslexic_map = ''
  au myac VimEnter,ColorScheme hi Dyslexic ctermfg=0 ctermbg=6 guifg=#000000 guibg=#008f8f
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_add = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1

  let g:calendar_frame = 'default'
  let g:calendar_first_day = 'sunday'
'''
