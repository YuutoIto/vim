[[plugins]]
repo = 'Shougo/dein.vim'
# rtp = ''
hook_add = '''
  command! Recache call dein#recache_runtimepath() | echo 'Recached!'
  command! Install call dein#install()
  command! Update  call dein#update()
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  let g:deol#floating_border = 'single'
  let g:deol#enable_dir_changed = v:false

  command! MyDeol Deol -start-insert -split=floating -command=zsh -toggle
'''
[plugins.ftplugin]
deol = '''
  nmap <buffer>e <Plug>(deol_edit)
  tmap <buffer><CR> <Plug>(deol_execute_line)

  tnoremap <esc> <c-\><c-n><c-w>c
  nnoremap <buffer>q <c-w>c

  call my#option#set_minimal_window()
'''

[[plugins]] # quickfixの各行を編集、反映できる
repo = 'thinca/vim-qfreplace'
hook_add = '''
  au myac FileType qf nnoremap <buffer>r <cmd>Qfreplace<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
# on_path = '.*'

[[plugins]]
repo = 'Shougo/defx.nvim'
if = "has('nvim')"
hook_source = 'source ~/.vim/rc/defx.rc.vim'
hook_add = '''
  nnoremap <silent><c-w>e <cmd>Defx -split=vertical -direction=topleft -winwidth=40 -no-listed -resume -buffer-name=tab`tabpagenr()` -search-recursive=`expand('%:p')`<CR>
  nnoremap <silent><c-w>E <cmd>Defx -split=vertical -direction=topleft -winwidth=40 -no-listed -resume -buffer-name=tab`tabpagenr()` -search=`expand('%:p')` `expand('%:p:h')`<CR>
  nmap <c-w><c-e> <c-w>e
  au myac BufWritePost * call defx#redraw()
'''
[plugins.ftplugin]
defx = '''
  " 別タブに移動する前に直前のバッファに移動
  au myac TabLeave <buffer> wincmd p
  au myac BufEnter,FocusGained <buffer> call defx#redraw()

  " 対象ファイル操作系:
  nnoremap <silent><buffer><nowait><expr>c   defx#do_action('copy')
  nnoremap <silent><buffer><nowait><expr>m   defx#do_action('move')
  nnoremap <silent><buffer><nowait><expr>p   defx#do_action('paste')
  nnoremap <silent><buffer><nowait><expr>r   defx#do_action('rename')
  nnoremap <silent><buffer><nowait><expr>yy  defx#do_action('yank_path', ':.')
  nnoremap <silent><buffer><nowait><expr>yY  defx#do_action('yank_path')
  nnoremap <silent><buffer><nowait><expr>d   defx#do_action(executable('Send2Trash') ? 'remove_trash' : 'remove')

  " 対象開く系:
  nnoremap <silent><buffer><nowait><expr>x   defx#do_action('execute_system')
  nnoremap <silent><buffer><expr>e          defx#do_action('drop')
  nmap <silent><buffer><cr> e

  " drop: 既に開かれていたらジャンプ
  nnoremap <silent><buffer><nowait><expr>s   defx#do_action('open', 'wincmd p \| split')
  " nnoremap <silent><buffer><nowait><expr>s   defx#do_action('drop', 'split')
  nnoremap <silent><buffer><nowait><expr>v   defx#do_action('open', 'wincmd p \| vsplit')
  " nnoremap <silent><buffer><nowait><expr>v   defx#do_action('drop', 'vsplit')
  " nnoremap <silent><buffer><nowait><expr>t  defx#do_action('open', 'tabedit')
  nnoremap <silent><buffer><nowait><expr>t  defx#do_action('drop', 'tabedit')

  " 作成系:
  nnoremap <silent><buffer><expr>K   defx#do_action('new_directory')
  nnoremap <silent><buffer><expr>N   defx#do_action('new_file')

  " 移動系:
  nnoremap <silent><buffer><expr>j   line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr>k   line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr>l   defx#do_action('open_tree')
  nnoremap <silent><buffer><expr>h   defx#do_action('close_tree')
  nnoremap <silent><buffer><expr>L   defx#do_action('open_directory')
  nnoremap <silent><buffer><expr>H   defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr>R   defx#do_action('open_tree_recursive')
  nnoremap <silent><buffer><expr>~   defx#do_action('cd')
  " nnoremap <silent><buffer><nowait><expr>\  defx#do_action('cd', getcwd())
  nmap <buffer><bs> H
  nmap <buffer><c-h> \
  nmap <buffer><nowait>< \

  " その他:
  nnoremap <silent><buffer><expr>!      defx#do_action('execute_command')
  nnoremap <silent><buffer><expr>.      defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr><c-l>  defx#do_action('redraw')
  nnoremap <silent><buffer><expr><nowait><space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr>*      defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr>q      (winnr() + winnr('$') == 2) ? ':quit<cr>' : defx#do_action('quit')
  nnoremap <silent><buffer>Q            <cmd>bdelete<cr>
  nnoremap <silent><buffer><expr><tab>  winnr('$') != 1 ? '<cmd>wincmd w<cr>' : ':<c-u>Defx -buffer-name=temp -split=vertical<cr>'
'''

## -----------------------------
## view
## -----------------------------

# [[plugins]]
# repo = 'powerman/vim-plugin-AnsiEsc'
# hook_add = '''
#   let g:no_cecutil_maps = 1
# '''

[[plugins]]
repo = 'tyru/current-func-info.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/lightline.rc.vim'

[[plugins]]
repo = 'mgee/lightline-bufferline'

[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
  let g:foldCCtext_enable_autofdc_adjuster = 0
  " let g:foldCCtext_head = 'printf("%3d ", v:foldend - v:foldstart+1)'
  let g:foldCCtext_head = ''
  " let g:foldCCtext_tail = ''
'''

[[plugins]]
repo = 'RRethy/vim-illuminate'
# if = "v:false"
# on_event = ['BufEnter']
hook_add = '''
  let g:Illuminate_ftblacklist = ['defx', 'denite', 'denite-filter']
  let g:Illuminate_highlightUnderCursor = 0
  " let g:Illuminate_delay = 0
  nmap \toh <cmd>IlluminateToggle<cr>
'''

## -----------------------------
## action
## -----------------------------

[[plugins]]
repo = 'tyru/nextfile.vim'
hook_add = '''
  let g:nf_map_next         = ']f'
  let g:nf_map_previous     = '[f'
  let g:nf_include_dotfiles = 0
  let g:nf_ignore_dir       = 1
  let g:nf_open_command     = 'edit'
  let g:nf_loop_files       = 1
  let g:nf_ignore_ext       = []
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_post_source = 'source ~/.vim/rc/submode.rc.vim'
# on_map = '<Plug>'

[[plugins]]
# vim-ambicmd
repo = 'kana/vim-altercmd'
# repo = 'tyru/vim-altercmd' # 高機能だが読み込みが2ms遅い
hook_post_source = 'source ~/.vim/rc/altercmd.rc.vim'

[[plugins]]
repo = 'kana/vim-repeat'
# repo = 'tpope/vim-repeat'
hook_add = '''
  let g:repeat_no_default_key_mappings = 1
  nmap . <Plug>(repeat-.)
'''

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
  map <silent> <space>w <plug>CamelCaseMotion_w
  map <silent> <space>b <plug>CamelCaseMotion_b
  map <silent> <space>e <plug>CamelCaseMotion_e
'''

[[plugins]]
repo = 'kana/vim-smartword'
hook_add = '''
  nmap w  <Plug>(smartword-w)
  nmap b  <Plug>(smartword-b)
  nmap e  <Plug>(smartword-e)
  nmap ge  <Plug>(smartword-ge)
  vmap w  <Plug>(smartword-w)
  vmap b  <Plug>(smartword-b)
  vmap e  <Plug>(smartword-e)
  vmap ge  <Plug>(smartword-ge)

  " word moveをCamelCase単位にする
  map <Plug>(smartword-basic-w)  <Plug>CamelCaseMotion_w
  map <Plug>(smartword-basic-b)  <Plug>CamelCaseMotion_b
  map <Plug>(smartword-basic-e)  <Plug>CamelCaseMotion_e
'''

[[plugins]]
repo = 'tkmpypy/chowcho.nvim'
hook_add = '''
  nmap \w <cmd>Chowcho<cr>
'''
hook_post_source = '''
lua << EOF
  require('chowcho').setup {
    icon_enabled = false, -- required 'nvim-web-devicons' (default: false)
    text_color = '#FAFCFB',
    bg_color = '#0c0b09',
    active_border_color = '#55fefb',
    border_style = 'rounded' -- 'default', 'rounded',
  }
EOF
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_add = '''
  map ;w <cmd>HopWordAC<cr>
  map ;b <cmd>HopWordBC<cr>

  map ;j <cmd>HopLineStartAC<cr>
  map ;k <cmd>HopLineStartBC<cr>

  map ;; <cmd>HopChar2<cr>
  map ;f <cmd>HopChar1AC<cr>
  map ;F <cmd>HopChar1BC<cr>

  " TODO: inclusive_jump消えたらしい. hint_offset?
  " https://phaazon.net/blog/hop-2022
  " inclusive_jump = true で;fで対象を含める
  omap ;f <cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, inclusive_jump = true })<cr>
  omap ;F <cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, inclusive_jump = true })<cr>

  " TODO: cursorがある場所を飛ばす
  " TODO: d;j したとき最後の行が消せない. d;kしたとき現在の行が消せない. 次の行が空行じゃないと再現
  " TODO: たまに現在の行のaとsが逆になる. ;wも1行目がおかしくなる
'''
hook_post_source = '''
lua << EOF
  require'hop'.setup()
EOF
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_ignore_case       = 0
  let g:clever_f_smart_case        = 0
  let g:clever_f_use_migemo        = 0
  let g:clever_f_across_no_line    = 0
  let g:clever_f_chars_match_any_signs = '' " ;で ({\"を代用
  let g:clever_f_fix_key_direction = 0 " 1だとどんな時でもfで後ろにFで前に移動する
  let g:clever_f_show_prompt       = 1
  let g:clever_f_timeout_ms        = 0

  let g:clever_f_repeat_last_char_inputs = ["\<CR>", "\<Tab>"]
'''

[[plugins]] # speedy
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
  au myac ColorScheme * hi ParenMatch guibg=#5353e0
'''

## -----------------------------
## search and replace
## -----------------------------

[[plugins]]
repo = 'haya14busa/is.vim'
hook_add = 'source ~/.vim/rc/is.rc.vim'


## -----------------------------
## syntax checker and formatter
## -----------------------------

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = 'source ~/.vim/rc/ale.rc.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'


## -----------------------------
## code runner
## -----------------------------

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = 'source ~/.vim/rc/quickrun.rc.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'
depends = 'vim-quickrun'

[[plugins]]
repo = 'osyo-manga/quickrun-outputter-replace_region'
depends = 'vim-quickrun'


## -----------------------------
## git
## -----------------------------

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'

# VCSのdiffをsigncolumnに表示
[[plugins]]
repo = 'mhinz/vim-signify'
hook_add =  '''
  nmap [h <plug>(signify-prev-hunk)zMzvzz
  nmap ]h <plug>(signify-next-hunk)zMzvzz
  nmap ,gu :SignifyHunkUndo<cr>
  nmap ,gD :SignifyHunkDiff<cr>

  let g:signify_disable_by_default = 0
  let g:signify_vcs_list = ['git']
  " let g:signify_vcs_cmds = {} " オプションも指定できる
  " let g:signify_difftool = '' (default 'diff')

  let g:signify_line_highlight = 0
  " let g:signify_fold_context = [] " (default [3, 8])

  let g:signify_realtime = 0
  " やたらsaveする
  let g:signify_cursorhold_normal = 0
  let g:signify_cursorhold_insert = 0
  let g:signify_update_on_bufenter = 0

  " これだけ無害
  let g:signify_update_on_focusgained = 1

  let g:signify_sign_show_text = 1 " 0だとsignのハイライトのみになる
  let g:signify_sign_add = '+'
  let g:signify_sign_delete = '-' " '✘'
  let g:signify_sign_delete_first_line = '‾'
  let g:signify_sign_change = '≈'
  let g:signify_sign_changedelete = g:signify_sign_delete
  let g:signify_sign_show_count = 1

  " let g:signify_skip_filetype = { 'vim': 1, 'c': 1 }
  " let g:signify_skip_filename = { '/home/user/.vimrc': 1 }
  " let g:signify_skip_filename_pattern = [ 'foo.*bar', 'tmp' ]
'''

## -----------------------------
## web
## -----------------------------

[[plugins]]
repo = 'mattn/webapi-vim'
hook_add = '''
  command! -nargs=* URIencode :call URIencode(<q-args>)
  command! -nargs=* URIdecode :call URIdecode(<q-args>)

  function! URIencode(...) abort
    if a:0 == 0 || '' ==# a:1
      let l:list = matchlist(getline('.'), '\v^(\s*)(.*)\s*$')[1:2]
      let l:url = webapi#http#encodeURI(l:list[1])
      call setline('.', l:list[0] . l:url)
    else
      echo webapi#http#encodeURI(a:1)
    endif
  endfunction

  function! URIdecode(...) abort
    if a:0 == 0 || '' ==# a:1
      let l:list = matchlist(getline('.'), '\v^(\s*)(.*)\s*$')[1:2]
      let l:url = webapi#http#decodeURI(l:list[1])
      call setline('.', l:list[0] . l:url)
    else
      echo webapi#http#decodeURI(a:1)
    endif
  endfunction
'''

## -----------------------------
## gf
## -----------------------------

[[plugins]]
repo = 'kana/vim-gf-user'
hook_add = '''
  let g:gf_user_no_default_key_mappings = 1
  nmap gft <Plug>(gf-user-<c-w>gF)
  nmap gfb <Plug>(gf-user-gF)
  nmap gfs <Plug>(gf-user-<c-w>F)
  " :verticalが上手く動かないから雑実装
  nmap gfv <Plug>(u10-vertical)<Plug>(gf-user-gF)
  " ftpluginで上書きを阻止するために必要
  nmap gf <Plug>(gf-user-gF)
  nmap gf<esc> <nop>

  " au myac FileType ruby call gf#user#extend('gf#ext#ruby', 1000)
'''
hook_post_source = '''
  " call when built-in functions failed
  call gf#user#extend('gf#ext#newfile', 1900)
'''

[[plugins]] # jump to vim autoload functions
repo = 'sgur/vim-gf-autoload'

[[plugins]] # jump to vim function
repo = 'hujo/gf-user-vimfn'

## -----------------------------
## treesitter
## -----------------------------

[[plugins]]
repo =  'nvim-treesitter/nvim-treesitter'
if = "has('nvim')"
hook_post_update = 'TSUpdate' # We recommend updating the parsers on update
# これVimEnterじゃなくてhook_addでは
hook_post_source = '''
  " set syntax=hoge が自動で実行されるのを防ぐ
  au! syntaxset

  luafile ~/.vim/rc/nvim-treesitter.rc.lua
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
hook_post_source = '''
lua <<EOF
  require'treesitter-context'.setup{
      enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
      max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
      patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
          -- For all filetypes
          -- Note that setting an entry here replaces all other patterns for this entry.
          -- By setting the 'default' entry below, you can control which nodes you want to
          -- appear in the context window.
          default = {
              'class',
              'function',
              'method',
              -- 'for', -- These won't appear in the context
              -- 'while',
              -- 'if',
              -- 'switch',
              -- 'case',
          },
          -- Example for a specific filetype.
          -- If a pattern is missing, *open a PR* so everyone can benefit.
          rust = {
              'impl_item',
          },
          yaml = { 'block_mapping_pair', },
          json = { 'pair', },
      },
      exact_patterns = {
          -- Example for a specific filetype with Lua patterns
          -- Treat patterns.rust as a Lua pattern (i.e "^impl_item$" will
          -- exactly match "impl_item" only)
          -- rust = true,
      },

      -- [!] The options below are exposed but shouldn't require your attention,
      --     you can safely ignore them.

      zindex = 20, -- The Z-index of the context window
      mode = 'topline',  -- Line used to calculate context. Choices: 'cursor', 'topline'
  }
EOF
'''

## -----------------------------
## misc
## -----------------------------

[[plugins]]
repo = 'lambdalisue/suda.vim'
# on_cmd = ['SudaWrite', 'SudaRead']
hook_add = '''
  " 仮想ファイルを開くようになるので ]f でnextfileが使えなくなる
  " let g:suda_smart_edit = 1
'''

[[plugins]]
# https://github.com/lambdalisue/reword.vim
repo = 'tpope/vim-abolish'
# on_map = ['<Plug>(abolish-coerce)', '<Plug>(abolish-coerce-word)']
# g:Abolishを他で使うため、遅延できない
hook_add = '''
  let g:abolish_no_mappings = 1
  nmap sc <Plug>(abolish-coerce-word)
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
# これVimEnterじゃなくてhook_addでは
hook_post_source = '''
  luafile ~/.vim/rc/lspconfig.rc.lua
  " hook_post_sourceはVimEnterで呼び出される(つまりFileTypeより後)
  " 最初に開いたファイルは手動で起動する必要がある
  LspStart
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
hook_add = '''
  nnoremap <c-w>o <cmd>AerialOpen<cr>
  nmap <c-w><c-o> <c-w>o
  nnoremap <c-w>O <cmd>AerialToggle!<cr>
'''
hook_post_source = '''
lua << EOF
  require('aerial').setup({
    backends = {
      _ = { "lsp", "treesitter", "markdown" },
      markdown = { "treesitter", "markdown" },
    },

    close_behavior = "global",
    open_automatic = false,

    -- default_direction = "float",
    default_direction = "right",
    placement_editor_edge = true,

    max_width = { 40, 0.3 },
    width = nil,
    min_width = 40,

    float = {
      -- Enum: cursor, editor, win
      --   cursor - Opens float on top of the cursor
      --   editor - Opens float centered in the editor
      --   win    - Opens float centered in the window
      relative = "win",

      -- These control the height of the floating window.
      -- They can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
      -- min_height and max_height can be a list of mixed types.
      -- min_height = {8, 0.1} means "the greater of 8 rows or 10% of total"
      max_height = 0.9,
      height = nil,
      min_height = { 8, 0.1 },

      override = function(conf)
        return conf
      end,
    }
  })
EOF
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
hook_post_source = '''
  highlight FidgetTitle guifg=#8cd6fb
  highlight FidgetTask guifg=#dcd6eb

lua << EOF
  require"fidget".setup{}
EOF
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]] # :PP! is same as :echomes
repo = 'thinca/vim-prettyprint'
hook_add = '''
  let g:prettyprint_string = ['raw'] " [] 'raw' 'split'
'''

[[plugins]]
repo = 'uplus/translate.vim'
rev = 'custom'
hook_add = '''
  let g:translate_source = "en"
  let g:translate_target = "ja"

  function! TranslateJoin(text) abort
    call translate#translate('', 0, 0, JoinText(a:text))
  endfunction

  vnoremap <expr>gst printf('"%sy', g:working_register) . "<cmd>call TranslateJoin(getreg(g:working_register))<cr>"
'''

[[plugins]] # test
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'thinca/vim-ref'


## -----------------------------
## archive
## -----------------------------

# [[plugins]]
# repo = 'matchit.zip'

# [[plugins]]
# repo = 'taku-o/vim-vis'

# [[plugins]] # <c-o> <c-i> 既に別タブ|ウィンドウで開かれていたらそっちに飛ぶ
# # 位置保存のタイミングが微妙
# repo = 'osyo-manga/vim-milfeulle'
# hook_add = '''
#   nmap <c-o> <Plug>(milfeulle-prev)
#   nmap <c-i> <Plug>(milfeulle-next)
#   let g:milfeulle_default_kind = "window"
#   let g:milfeulle_default_jumper_name = "win_tab_bufnr_pos_line"
# '''

# [[plugins]]
# repo = 'johngrib/vim-game-code-break'
# add_hook  = '''
#   let g:vim_game_code_break_item_limit = 4
# '''

# 容量が1GBぐらいある
# [[plugins]]
# repo = 'liuchengxu/vim-clap'
# hook_post_update = 'Clap install-binary!'

# 謎挙動
# [[plugins]]
# repo = 'Konfekt/FastFold'

# [[plugins]] # Need reloadble vimrc
# repo = "mattn/benchvimrc-vim"

# [[plugins]] # highlight yanked text
# repo = 'haya14busa/vim-operator-flashy'
# hook_source = '''
#   map y <Plug>(operator-flashy)
#   nmap Y <Plug>(operator-flashy)$
#   let g:operator#flashy#flash_time = 300
#   " let g:operator#flashy#group =
#   hi Flashy term=bold ctermbg=0 guibg=#13556A
# '''

# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# # on_event = ['FocusGained', 'FocusLost', 'TextYankPost']
# # on_source = ['denite.nvim']
# # on_path = '.*'
# hook_add = '''
#   let g:neoyank#limit = 20
#   let g:neoyank#disable_write = 1
# '''
# hook_post_source = '''
#   " スクリーンロック復帰後にgetregがハングする
#   " tmuxでもそうでない環境でも再現
#   " clipboardはunnamedでもunnamedplusでも再現
#   " xselで再現, xcilpは未確認
#   au! neoyank FocusGained
# '''

# [[plugins]]
# repo = 'bfredl/nvim-miniyank'
# if = "v:false"
# # if = 'has("clipboard")'
# hook_add = '''
#   let g:miniyank_filename = $HOME . "/.vim/tmp/miniyank.mpack"
# '''
# hook_source = '''
#   map p <Plug>(miniyank-autoput)
#   map P <Plug>(miniyank-autoPut)
#   map <c-n> <Plug>(miniyank-cycle)
# '''
