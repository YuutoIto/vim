[[plugins]]
repo = 'Shougo/dein.vim'
# rtp = ''
hook_add = '''
  command! Recache call dein#recache_runtimepath() | echo 'Recached!'
  command! Install call dein#install()
  command! Update  call dein#update()
'''

# [[plugins]]
# repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/rc/denite.rc.vim'

[plugins.ftplugin]
denite = '''
  setl signcolumn=yes

  nnoremap <silent><buffer><expr>i denite#do_map('open_filter_buffer')
  nmap <buffer>I i<c-a>

  nnoremap <silent><buffer><expr>j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr>k line('.') == 1 ? 'G' : 'k'

  nnoremap <silent><buffer><nowait><expr><space> denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr>* denite#do_map('toggle_select_all')

  nnoremap <silent><buffer><expr>a denite#do_map('choose_action')
  nnoremap <silent><buffer><expr><tab> denite#do_map('choose_action')

  nnoremap <silent><buffer><expr>yy denite#do_map('do_action', 'yank')
  nnoremap <silent><buffer><expr><cr> denite#do_map('do_action')
  nnoremap <silent><buffer><nowait><expr>t denite#do_map('do_action', 'tabswitch')
  nnoremap <silent><buffer><nowait><expr>s denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><nowait><expr>v denite#do_map('do_action', 'vsplit')
  " nnoremap <silent><buffer><nowait><expr>s denite#do_map('do_action', 'splitswitch')
  " nnoremap <silent><buffer><nowait><expr>v denite#do_map('do_action', 'vsplitswitch')
  nmap <buffer><c-j> <cr>

  nnoremap <silent><buffer><nowait><expr>' denite#do_map('quick_move')
  nnoremap <silent><buffer><nowait><expr>q denite#do_map('quit')
  nmap <buffer><esc> q

  nnoremap <silent><buffer><nowait><expr>p denite#do_map('do_action', 'echo')
  nnoremap <silent><buffer><nowait><expr>r denite#do_map('do_action', 'qfreplace')
  nmap <buffer>R *r
'''

denite-filter = '''
  " <esc>が上書きされる
  let b:lexima_disabled = 1

  nmap <silent><buffer><nowait><esc> <Plug>(denite_filter_quit)
  imap <silent><buffer><c-o> <Plug>(denite_filter_quit)
  imap <silent><buffer><nowait><esc> <Plug>(denite_filter_quit)
  " inoremap <silent><buffer><nowait><expr><esc> denite#do_map('quit')

  imap <silent><buffer><cr> <Plug>(denite_filter_quit)<cr>
  imap <silent><buffer><c-t> <Plug>(denite_filter_quit)t
  imap <silent><buffer><c-s> <Plug>(denite_filter_quit)s
  imap <silent><buffer><c-v> <Plug>(denite_filter_quit)v
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_post_update = 'call fruzzy#install()'
hook_source = '''
  " let g:fruzzy#usenative=1
  let g:fruzzy#sortonempty = 0
'''


[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']
# on_path = '.*'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_source = 'source ~/.vim/rc/defx.rc.vim'
hook_add = '''
  nnoremap <silent><c-w>e :<c-u>Defx -split=vertical -direction=topleft -winwidth=40 -no-listed -resume -buffer-name=tab`tabpagenr()` -search=`expand('%:p')`<CR>
  nmap <c-w><c-e> <c-w>e
'''

[plugins.ftplugin]
defx = '''
  " 別タブに移動する前に直前のバッファに移動
  au myac TabLeave <buffer> wincmd p

  " 対象ファイル操作系:
  nnoremap <silent><buffer><nowait><expr>c   defx#do_action('copy')
  nnoremap <silent><buffer><nowait><expr>m   defx#do_action('move')
  nnoremap <silent><buffer><nowait><expr>p   defx#do_action('paste')
  nnoremap <silent><buffer><nowait><expr>r   defx#do_action('rename')
  nnoremap <silent><buffer><nowait><expr>yy  defx#do_action('yank_path')
  nnoremap <silent><buffer><nowait><expr>d   defx#do_action('remove_trash')

  " 対象開く系:
  nnoremap <silent><buffer><nowait><expr>x   defx#do_action('execute_system')
  nnoremap <silent><buffer><nowait><expr>s   defx#do_action('drop', 'split')
  nnoremap <silent><buffer><nowait><expr>v   defx#do_action('drop', 'vsplit')
  " drop: 既に開かれていたらジャンプ
  nnoremap <silent><buffer><nowait><expr>t  defx#do_action('drop', 'tabedit')
  nnoremap <silent><buffer><expr>e          defx#do_action('drop')
  nmap <silent><buffer><cr> e

  " PP choosewin#start(range(1, winnr('$')))

  " 作成系:
  nnoremap <silent><buffer><expr>K   defx#do_action('new_directory')
  nnoremap <silent><buffer><expr>N   defx#do_action('new_file')

  " 移動系:
  nnoremap <silent><buffer><expr>j   line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr>k   line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr>l   defx#do_action('open_tree')
  nnoremap <silent><buffer><expr>h   defx#do_action('close_tree')
  nnoremap <silent><buffer><expr>L   defx#do_action('open_directory')
  nnoremap <silent><buffer><expr>H   defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr>R   defx#do_action('open_tree_recursive')
  nnoremap <silent><buffer><expr>~   defx#do_action('cd')
  nnoremap <silent><buffer><nowait><expr>\  defx#do_action('cd', getcwd())
  nmap <buffer><bs> H
  nmap <buffer><c-h> \
  nmap <buffer><nowait>< \

  " その他:
  nnoremap <silent><buffer><expr>!      defx#do_action('execute_command')
  nnoremap <silent><buffer><expr>.      defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr><c-l>  defx#do_action('redraw')
  nnoremap <silent><buffer><expr><nowait><space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr>*      defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr>q      (winnr() + winnr('$') == 2) ? ':quit<cr>' : defx#do_action('quit')
  nnoremap <silent><buffer><expr><tab>  winnr('$') != 1 ? ':<c-u>wincmd w<cr>' : ':<c-u>Defx -buffer-name=temp -split=vertical<cr>'
'''


#view

# [[plugins]]
# repo = 'vim-scripts/Changed'
# repo = 'kyouryuukunn/vim-changed'

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
hook_add = '''
  let g:no_cecutil_maps = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/lightline.rc.vim'

[[plugins]]
repo = 'mgee/lightline-bufferline'
depends = 'lightline.vim'

[[plugins]]
repo = 'tyru/current-func-info.vim'

# [[plugins]]
# repo = 't9md/vim-ezbar'
# hook_add = 'source ~/.vim/rc/ezbar.rc.vim'


#action

[[plugins]]
repo = 'tyru/nextfile.vim'
hook_add = '''
  let g:nf_map_next         = ']f'
  let g:nf_map_previous     = '[f'
  let g:nf_include_dotfiles = 0
  let g:nf_ignore_dir       = 1
  let g:nf_open_command     = 'edit'
  let g:nf_loop_files       = 1
  let g:nf_ignore_ext       = []
'''

[[plugins]] # highlight yanked text
repo = 'haya14busa/vim-operator-flashy'
hook_source = '''
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
  let g:operator#flashy#flash_time = 300
  " let g:operator#flashy#group =
  hi Flashy term=bold ctermbg=0 guibg=#13556A
'''

# [[plugins]]
# repo = 'LeafCage/yankround.vim'

[[plugins]]
repo = 'bfredl/nvim-miniyank'
if = 'has("clipboard")'
hook_add = '''
  let g:miniyank_filename = $HOME . "/.vim/tmp/miniyank.mpack"
'''
hook_source = '''
  map p <Plug>(miniyank-autoput)
  map P <Plug>(miniyank-autoPut)
  map <c-n> <Plug>(miniyank-cycle)
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_post_source = 'source ~/.vim/rc/submode.rc.vim'
on_map = '<Plug>'

[[plugins]]
# vim-ambicmd
repo = 'tyru/vim-altercmd'
hook_post_source = 'source ~/.vim/rc/altercmd.rc.vim'

[[plugins]]
repo = 'kana/vim-repeat'
# repo = 'tpope/vim-repeat'
hook_add = '''
  let g:repeat_no_default_key_mappings = 1
  nmap . <Plug>(repeat-.)
'''

[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
  let g:foldCCtext_enable_autofdc_adjuster = 0
  " let g:foldCCtext_head = 'printf("%3d ", v:foldend - v:foldstart+1)'
  let g:foldCCtext_head = ''
  " let g:foldCCtext_tail = ''
'''

# [[plugins]]
# 謎挙動
# repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = ['<Plug>(niceblock-I)', '<Plug>(niceblock-gI)', '<Plug>(niceblock-A)']
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  nmap \w <Plug>(choosewin)
  let g:choosewin_overlay_enable          = 1
  let g:choosewin_overlay_clear_multibyte = 1
  let g:choosewin_overlay_font_size       = 'small'
  let g:choosewin_blink_on_land           = 0
  let g:choosewin_statusline_replace      = 0
  let g:choosewin_tabline_replace         = 0

  " TODO: Don't effect
  " let g:choosewin_hook_enable = 1
  "
  " function! s:choosewin_clear_BadSpace(winnums) abort
  "   hi clear BadSpace
  "   return a:winnums;
  " endfunction
  "
  " let g:choosewin_hook = {
  "   \ 'filter_window': function('s:choosewin_clear_BadSpace'),
  "   \ }
'''

[[plugins]]
repo = 'bkad/CamelCaseMotion'

[[plugins]]
repo = 'kana/vim-smartword'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-']

[[plugins]]
repo = 'rhysd/clever-f.vim'
# repo = 'chrisbra/improvedft'      # can input many charactores
# repo = 'deris/vim-shot-f'      # show oneshot jump points

# [[plugins]]
# repo = 'matchit.zip'

[[plugins]] # speedy
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
  au myac ColorScheme * hi ParenMatch guibg=#5353e0
'''

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'taku-o/vim-vis'

[[plugins]]
repo = 'tyru/visualctrlg.vim'

# [[plugins]] # <c-o> <c-i> 既に別タブ|ウィンドウで開かれていたらそっちに飛ぶ
# # 位置保存のタイミングが微妙
# repo = 'osyo-manga/vim-milfeulle'
# hook_add = '''
#   nmap <c-o> <Plug>(milfeulle-prev)
#   nmap <c-i> <Plug>(milfeulle-next)
#   let g:milfeulle_default_kind = "window"
#   let g:milfeulle_default_jumper_name = "win_tab_bufnr_pos_line"
# '''


#search and replace

[[plugins]] # show search point on the command-line
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'haya14busa/incsearch-index.vim'

#syntaxchecker

[[plugins]]
# repo = 'w0rp/ale'
repo = 'uplus/ale'
hook_add = 'source ~/.vim/rc/ale.rc.vim'

[[plugins]]
if = 0
repo = 'osyo-manga/vim-watchdogs'
depends = ['vim-quickrun', 'shabadou.vim', 'vim-hier', 'quickfixstatus', ]
hook_add = '''
  let g:watchdogs_check_BufWritePost_enable = 1
  " let g:watchdogs_check_BufWritePost_enables = { 'vim' : 0, }
  let g:watchdogs_check_CursorHold_enable = 0
  let g:watchdogs_check_BufWritePost_enable_on_wq = 0

  " 連続して保存した場合、前のシンタックスチェックを停止する
  au myac BufWritePre * WatchdogsRunSweep

  command! ShowWatchDogsDefault CaptureWin PP g:watchdogs#default_config
  command! WatchdogsC89 let b:watchdogs_checker_type = 'watchdogs_checker/c89'
  command! DisableWatchdogs let b:watchdogs_checker_type = 'watchdogs_checker/null'

  au myac BufRead,BufNewFile ~/codes/jprog/* WatchdogsC89
'''

#quickrun

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = 'source ~/.vim/rc/quickrun.rc.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'
depends = 'vim-quickrun'

# [[plugins]]
# repo = 'KazuakiM/vim-qfstatusline'

[[plugins]]
repo = 'osyo-manga/quickrun-outputter-replace_region'
depends = 'vim-quickrun'


#input

#git

# VCSのdiffをsigncolumnに表示
[[plugins]]
repo = 'mhinz/vim-signify'
hook_add =  '''
  nmap [h <plug>(signify-prev-hunk)zMzvzz
  nmap ]h <plug>(signify-next-hunk)zMzvzz

  let g:signify_disable_by_default = 0
  let g:signify_vcs_list = ['git']
  " let g:signify_vcs_cmds = {} " オプションも指定できる
  " let g:signify_difftool = '' (default 'diff')

  let g:signify_line_highlight = 0
  " let g:signify_fold_context = [] " (default [3, 8])

  let g:signify_realtime = 0
  " やたらsaveする
  let g:signify_cursorhold_normal = 0
  let g:signify_cursorhold_insert = 0
  let g:signify_update_on_bufenter = 0

  " これだけ無害
  let g:signify_update_on_focusgained = 1

  let g:signify_sign_show_text = 1 " 0だとsignのハイライトのみになる
  let g:signify_sign_add = '+'
  let g:signify_sign_delete = '-' " '✘'
  let g:signify_sign_delete_first_line = '‾'
  let g:signify_sign_change = '≈'
  let g:signify_sign_changedelete = g:signify_sign_delete
  let g:signify_sign_show_count = 1

  " let g:signify_skip_filetype = { 'vim': 1, 'c': 1 }
  " let g:signify_skip_filename = { '/home/user/.vimrc': 1 }
  " let g:signify_skip_filename_pattern = [ 'foo.*bar', 'tmp' ]
'''

[[plugins]]
# git branch
repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'lambdalisue/gina.vim'


#web

[[plugins]]
repo = 'mattn/webapi-vim'

# [[plugins]]
# repo = 'mattn/wwwrenderer-vim'

[[plugins]]
repo = 'thinca/vim-openbuf'


#tag and ref

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'

[[plugins]]
repo = 'mfumi/ref-dicts-en'


#go

[[plugins]] # Fmtしてもホールド維持
repo = 'vim-jp/vim-go-extra'
hook_add = '''
  let g:gofmt_command = 'goimports'
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  function! s:go_config() abort
    nnoremap <buffer><silent>gd :<c-u>call go#def#Jump('split')<cr>
  endfunction
  au myac FileType go call s:go_config()
  let g:go_def_mapping_enabled = 0
  let g:go_textobj_enabled = 0
  let g:go_doc_keywordprg_enabled = 1
  let g:go_fmt_autosave = 0
  let g:go_template_autocreate = 0
'''

# [[plugins]]
# repo = 'dgryski/vim-godef'


#haskell

[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = 'haskell'

[[plugins]]
# こっちのほうが色つく
repo = 'dag/vim2hs'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
if = 0
hook_add = '''
  let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
  let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
  let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
  let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
  let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
  let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
  let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
'''

#js

[[plugins]]
# syntax fold
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'ternjs/tern_for_vim'
hook_add = '''
  let tern#command = ['tern']
  let tern#arguments = ['--no-port-file']
  let g:tern_show_loc_after_rename = 0
  let g:tern_set_omni_function = 0
'''


#misc
[[plugins]]
repo = 'kana/vim-gf-user'
hook_add = '''
  let g:gf_user_no_default_key_mappings = 1
  nmap gft <Plug>(gf-user-<c-w>gF)
  nmap gfb <Plug>(gf-user-gF)
  nmap gfs <Plug>(gf-user-<c-w>F)
  " :verticalが上手く動かないから雑実装
  nmap gfv <Plug>(u10-vertical)<Plug>(gf-user-gF)
  " ftpluginで上書きを阻止するために必要
  nmap gf <Plug>(gf-user-gF)
  nmap gf<esc> <nop>

  au myac FileType ruby call gf#user#extend('gf#ext#ruby', 1000)
'''
hook_post_source = '''
  " call when built-in functions failed
  call gf#user#extend('gf#ext#newfile', 1900)
'''

[[plugins]] # jump to vim autoload functions
repo = 'sgur/vim-gf-autoload'

[[plugins]] # jump to vim function
repo = 'hujo/gf-user-vimfn'

# little slow
# [[plugins]]
# repo = 'pekepeke/vim-gf-ruby-require'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
if = "has('nvim')"
hook_add = '''
  let g:context_filetype#search_offset = 200
  let g:precious_enable_switchers = {
    \ '*': { 'setfiletype': 0 },
    \ 'markdown': { 'setfiletype': 1 },
    \ 'toml': { 'setfiletype': 1 },
    \ 'html': { 'setfiletype': 1 },
    \}
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]] # :PP! is same as :echomes
repo = 'thinca/vim-prettyprint'
hook_add = '''
  let g:prettyprint_string = ['raw'] " [] 'raw' 'split'
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'rhysd/wandbox-vim'
hook_add = '''
  nnoremap ,wb :<c-u>Wandbox<cr>
  let g:wandbox#default_compiler = get(g:, 'wandbox#default_compiler', {})
  let g:wandbox#default_compiler = {
    \ 'cpp': 'clang-head',
    \ }
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1

  let g:calendar_frame = 'default'
  let g:calendar_first_day = 'sunday'
'''

# [[plugins]]
# repo = 'thinca/vim-template'
# hook_add = '''
#   let g:template_basedir = '~/.vim/templates'
# '''

# [[plugins]] # Need reloadble vimrc
# repo = "mattn/benchvimrc-vim"

# [[plugins]]
# repo = 'Valodim/vim-zsh-completion'

# [[plugins]]
# repo = 'fweep/vim-zsh-path-completion'

[[plugins]]
repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'syngan/vim-vimlint'
depends = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'thinca/vim-themis'
