## operator

[[plugins]]
repo = 'kana/vim-operator-user'
hook_source = '''
  nmap <Space>k <Plug>(operator-jump-head-out)a
  nmap <Space>j <Plug>(operator-jump-tail-out)a

  nmap se <Plug>(operator-evalruby)
  nmap seL <Plug>(operator-evalruby)<Plug>(textobj-line-a)
  xmap se <Plug>(operator-evalruby)
'''
hook_post_source = '''
  call operator#user#define('space-fold', 'my#ot#operator_space_fold')
  call operator#user#define('blank2void', 'my#ot#operator_blank2void')

  " Add fold marker and space to end of line
  nmap zf <Plug>(operator-space-fold)
  xmap zf <Plug>(operator-space-fold)

  nmap d <Plug>(operator-blank2void)
  xmap d <Plug>(operator-blank2void)
  nmap <silent>dd :exec "normal \<Plug>(vim-original-visualline)d"<cr>
  " TODO cバージョン作るのむずい 削除した場所をピンポイントで編集させるの難しい
'''

[[plugins]] # gr
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
hook_add = '''
  nmap gz <Plug>(operator-replace)
  xmap gz <Plug>(operator-replace)
  " for s:c in split("\" ' ` ( { [ <")
  "   exe 'nmap gz' . s:c '<Plug>(operator-replace)i' . s:c
  " endfor
  " unlet s:c
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-block'
depends = 'vim-operator-user'

[[plugins]] # sa sd sr
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
hook_add = '''
  " () {} はab aB で表す 他は記号 でもb Bは使わないかな
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)a
  map <silent>sr <Plug>(operator-surround-replace)a

  " if you use vim-textobj-multiblock
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

  nmap S <Plug>(vim-original-visual)<Plug>(vim-original-tail)<Plug>(operator-surround-append)
  " nmap saw saaw
  " nmap saW saaW
  nmap saL saiL
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-exec_command'
depends = 'vim-operator-user'


## textobj

[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
  call textobj#user#plugin(
        \ 'blankline', {
        \   'prev': {'select': '', 'select-function': 'my#ot#textobj_blankline_prev'},
        \   'next': {'select': '', 'select-function': 'my#ot#textobj_blankline_next'},
        \ },
        \ )

  omap } <Plug>(textobj-blankline-next)
  omap { <Plug>(textobj-blankline-prev)
'''

[[plugins]] # Can make textobj by regex
repo = 'osyo-manga/vim-textobj-from_regexp'
depends = 'vim-textobj-user'

[[plugins]] # e buffer
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

[[plugins]] # i
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

[[plugins]] # z
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'

[[plugins]] # L ignore last-char of current-line
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
hook_add = '''
  let g:textobj_line_no_default_key_mappings = 1
  omap aL <Plug>(textobj-line-a)
  omap iL <Plug>(textobj-line-i)

  " whitout last <Space> <CR>...
  nmap yY y<Plug>(textobj-line-i)
  nmap dD d<Plug>(textobj-line-i)
  nmap cC c<Plug>(textobj-line-i)
'''

[[plugins]] # camelcase supported word textobj
# repo = 'h1mesuke/textobj-wiw'
repo = 'rhysd/vim-textobj-wiw' # 本家のautoload版
depends = 'vim-textobj-user'
hook_add = '''
  " bkad/CamelCaseMotionと組み合わせれば意図した通りに動く
  let g:textobj_wiw_no_default_key_mappings = 1
  omap a<space>w <Plug>(textobj-wiw-a)
  omap i<space>w <Plug>(textobj-wiw-i)
  xmap a<space>w <Plug>(textobj-wiw-a)
  xmap i<space>w <Plug>(textobj-wiw-i)
'''

[[plugins]] # select a range between character
repo = 'thinca/vim-textobj-between'
depends = 'vim-textobj-user'
hook_add = '''
  " デフォルトの af if はtreesitterと被る
  let g:textobj_between_no_default_key_mappings = 1

  omap aB <Plug>(textobj-between-a)
  omap iB <Plug>(textobj-between-i)

  omap a\| <Plug>(textobj-between-a)\|
  omap i\| <Plug>(textobj-between-i)\|
'''

[[plugins]] # v last pasted textobj
repo = 'gilligan/textobj-lastpaste'
depends = 'vim-textobj-user'
hook_add = '''
  let g:textobj_lastpaste_no_default_key_mappings = 1
  omap v <Plug>(textobj-lastpaste-i)
'''

[[plugins]] # b some block
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
hook_add = '''
  let g:textobj_multiblock_no_default_key_mappings = 1
  let g:textobj#multiblock#enable_block_in_cursor = 1
  let g:textobj_multiblock_search_limit = 40

  " 優先度は設定順
  " arg3に1を設定すると同一行のみ判定になる
  let g:textobj_multiblock_blocks = [
        \   ['"', '"', 1],
        \   ["'", "'", 1],
        \   ['`', '`', 1],
        \   ['(', ')'],
        \   ['[', ']'],
        \   ['{', '}'],
        \   ['<', '>', 1],
        \   ['|', '|', 1],
        \   ['（', '）', 1],
        \   ['「', '」', 1],
        \ ]

  omap ib <Plug>(textobj-multiblock-i)
  xmap ib <Plug>(textobj-multiblock-i)
  omap ab <Plug>(textobj-multiblock-a)
  xmap ab <Plug>(textobj-multiblock-a)
'''

[[plugins]] # I A 連続したtextobjを矩形選択 ciw -> cIw
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-textobj-user'

# ちょい重い5ms
# [[plugins]] # 複数のtextobjを一つにまとめる
# repo = 'osyo-manga/vim-textobj-multitextobj'
# depends = 'vim-textobj-user'
# hook_add = '''
#   " 上から順に textobj を適用していき、該当するものが使用される
#   let g:textobj_multitextobj_textobjects_i = [
#     \ "\<Plug>(textobj-url-i)",
#     \ "\<Plug>(textobj-multiblock-i)",
#     \ "\<Plug>(textobj-function-i)",
#     \ "\<Plug>(textobj-entire-i)",
#     \]
#   omap amt <Plug>(textobj-multitextobj-a)
#   omap imt <Plug>(textobj-multitextobj-i)
#   vmap amt <Plug>(textobj-multitextobj-a)
#   vmap imt <Plug>(textobj-multitextobj-i)
# '''

# [[plugins]] " am im 任意の2つのmotionの間
# reop = 'hchbaw/textobj-motionmotion.vim'
# depends = 'vim-textobj-user'
