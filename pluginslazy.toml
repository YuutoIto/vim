#unite

# [[plugins]]
# repo = 'rhysd/unite-ruby-require.vim'
# on_source = 'unite.vim'
# on_ft= 'ruby'

[[plugins]]
repo = 'basyura/unite-rails'
on_source = 'unite.vim'
on_ft = 'ruby'


#view

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = ['open-browser.vim']
on_ft = 'markdown'
hook_add = '''
  " " 設定されてると非同期にならない
  " if executable('firefox')
  "   let g:previm_open_cmd='firefox'
  " endif
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
'''

# [[plugins]]
# repo = 'Yggdroot/indentLine'
# on_cmd = ['IndentLinesToggle', 'LeadingSpaceToggle']
# hook_add = '''
#   let g:indentLine_enabled              = 0
#   let g:indentLine_faster               = 1
#   let g:indentLine_showFirstIndentLevel = 1
#   let g:indentLine_color_term           = 208
#   nmap <silent>\tl :IndentLinesToggle<CR>
# '''

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = ['<Plug>(quickhl', '<Plug>(operator-quickhl']

[[plugins]]
repo = 'oblitum/rainbow'
on_cmd = ['RainbowToggle', 'RainbowLoad']
hook_add = '''
  let g:rainbow_ctermfgs = ['blue', 'green', 'yellow', 'magenta', 'red', 'darkmagenta', 'darkblue', 'darkgreen', 'darkcyan']
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_cmd = ['ColorClear', 'ColorToggle', 'ColorHighlight']
hook_add = '''
  let g:colorizer_nomap   = 1
  let g:colorizer_startup = 0
  nmap \hz <Plug>Colorizer
'''


#action

[[plugins]]
repo = 'chrisbra/unicode.vim'
on_cmd = ['Digraphs', 'SearchUnicode', 'UnicodeName', 'UnicodeTable', 'DownloadUnicode']
on_map = [['i', '<Plug>(DigraphComplete)', '<Plug>(UnicodeComplete)', '<Plug>(UnicodeGA)', '<Plug>(MakeDigraph)', '<Plug>(UnicodeSwapCompleteName)']]
hook_add = '''
  imap <c-x><c-g> <Plug>(DigraphComplete)
  imap <c-x><c-z> <Plug>(UnicodeComplete)
  imap <c-x>g <c-x><c-g>
  imap <c-x>z <c-x><c-z>
'''

[[plugins]] # has textobj
repo = 'AndrewRadev/sideways.vim'
on_map = ['<Plug>Sideways']
on_cmd = ['SidewaysLeft', 'SidewaysRight', 'SidewaysJumpLeft', 'SidewaysJumpRight']

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  nmap sl <Plug>(EasyAlign)
  vmap sl <Plug>(EasyAlign)
  nmap <Space>sl <Plug>(LiveEasyAlign)
  vmap <Space>sl <Plug>(LiveEasyAlign)
'''
hook_source = 'source ~/.vim/rc/easyalign.rc.vim'

[[plugins]]
repo = 'uplus/vim-clurin'
on_map = ['<Plug>(clurin-next)', '<Plug>(clurin-prev)']
hook_source = 'source ~/.vim/rc/clurin.rc.vim'
# mapping in submode.rc.vim
hook_add = '''
  nmap <silent><Plug>(clurin-undojoin) <Plug>(u10-undojoin)<Plug>(clurin-next)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>(jplus'

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = ['<Plug>(expand_region_expand)', '<Plug>(expand_region_shrink)']

[[plugins]]
repo     = 'dhruvasagar/vim-table-mode'
on_map   = ['<Plug>(table-mode', '\tm', '\tt']
on_cmd   = ['TableModeToggle', 'Tableize']
hook_add = '''
  let g:table_mode_map_prefix = '\t'
  let g:table_mode_corner = '|'
  xmap \tT <Plug>(table-mode-tableize-delimiter)
'''

[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = ['<Plug>SpeedDatingUp', '<Plug>SpeedDatingDown']
hook_add = '''
  let g:speeddating_no_mappings = 1
  nmap <c-a> <Plug>SpeedDatingUp
  nmap <c-x> <Plug>SpeedDatingDown
  xmap <c-a> <Plug>SpeedDatingUp
  xmap <c-x> <Plug>SpeedDatingDown
'''
hook_post_source = '''
  " SpeedDatingFormat! %v
  " SpeedDatingFormat! %^v " Roman numerals
  let g:speeddating_formats = get(g:, 'speeddating_formats', [])
  let g:speeddating_formats += [['%v', 0, 1]]
  let g:speeddating_formats += [['%^v', 0, 1]]
'''

[[plugins]]
repo = 'tpope/vim-characterize'
on_map = '<Plug>(characterize)'
hook_add = '''
  nmap gaa <Plug>(characterize)
'''


#search and replace

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>(asterisk-'

[[plugins]]
repo = 'tpope/vim-abolish'
on_map = ['<Plug>Coerce']
hook_add = '''
  let g:abolish_no_mappings = 1
  nmap sc <plug>Coerce
'''

[[plugins]]
repo = 'osyo-manga/vim-hopping'
on_map = '<Plug>(hopping'

[[plugins]]
repo = 'daisuzu/rainbowcyclone.vim'
on_map = ['<Plug>(rc_search_', '<Plug>(rc_highlight)']

[[plugins]] # quickfixの各行を編集、反映できる
repo = 'thinca/vim-qfreplace'
on_ft = ['unite', 'quickfix']
hook_add = '''
  au myac FileType qf nnoremap <buffer>r :<C-u>Qfreplace<CR>
'''


#ruby

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'todesking/ruby_hl_lvar.vim'
if = "!has('nvim')"
on_ft = 'ruby'
hook_add = '''
  let g:ruby_hl_lvar_hl_group = 'rubyLocalVariable'
  au myac ColorScheme * hi rubyLocalVariable ctermfg=38
'''

#python

[[plugins]]
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#show_call_signatures = 1
  let g:jedi#show_call_signatures_delay = 200
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = 'python'
hook_add = '''
  let g:autopep8_ignore = 'E221,E226,E261,E302,E303,E305,F401,W292,W391'
  let g:autopep8_max_line_length = 200
'''

#haskell
[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = 'haskell'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
external_commands = 'ghc-mod'


#input

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_ft = ['snippet', 'neosnippet']
on_i = 1

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_post_source = 'source ~/.vim/rc/lexima.rc.vim'

[[plugins]]
repo = 'mattn/googlesuggest-complete-vim'
on_i = 1
hook_add = '''
  command! EnableGoogleSuggest set completefunc=googlesuggest#Complete
  EnableGoogleSuggest
'''

[[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
  command! EnableEmoji set completefunc=emoji#complete
'''


#git

[[plugins]]
# git log
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']
on_map = '<Plug>(agit-'

[[plugins]]
# git add -p
repo = 'AndrewRadev/gapply.vim'
on_cmd = 'Gapply'
on_func = 'gapply#Start()'

[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = 'gitcommit'

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista']
on_func = 'gista#'

[[plugins]]
repo = 'lambdalisue/vim-gita'
on_cmd = ['Gita']

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'webapi-vim'
on_cmd = 'Gist'
hook_source = '''
  let g:gist_clip_command = 'xclip -selection clipboard'
'''

[[plugins]]
# TODO
repo = 'junegunn/vim-github-dashboard'
repo = 'uplus/vim-github-dashboard'
on_cmd = ['GHDashboard', 'GHActivity']
hook_add = '''
  let g:github_dashboard = {
    \ 'username': 'uplus',
    \ 'position': 'tab',
    \ }
'''


#web

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = [ 'OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch' ]
on_map = [ '<Plug>(openbrowser-open)', '<Plug>(openbrowser-search)', '<Plug>(openbrowser-smart-search)', '<Plug>(openbrowser-wwwsearch)' ]
on_func = ['openbrowser#open', 'openbrowser#search', 'openbrowser#smart_search']

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq' ]

[[plugins]]
repo = 'mattn/excitetranslate-vim'
on_cmd = ['ExciteTranslate', 'Trans']
hook_add = '''
  xnoremap gst :ExciteTranslate<CR>
'''
hook_source = '''
  command! -range Trans :<line1>,<line2>:ExciteTranslate

  autocmd BufNewFile ==Translate==* call s:trans_config()
  function! s:trans_config() abort
    setl nobuflisted
    nnoremap q :bd<CR>
  endfunction
'''


#tags and ref

# [[plugins]] # Ruby/Bundlerに対応して、必要最低限のtagsのみを非同期生成
# # 非同期生成とRuby/Bundler対応は直行してる
# repo = 'alpaca-tc/alpaca_tags'
# depends = 'vimproc.vim'
# on_cmd = ['AlpacaTagsBundle', 'AlpacaTagsUpdate', 'AlpacaTagsEnable', 'AlpacaTagsSet', 'AlpacaTagsCleanCache', 'AlpacaTagsDisable', 'AlpacaTagsKillProcess', 'AlpacaTagsProcessStatus']
# hook_add = '''
#   let g:alpaca_tags#config = {
#         \    '_' : '-R --sort=yes',
#         \    'ruby': '--languages=+Ruby',
#         \ }
#
#   augroup AlpacaTags
#     autocmd!
#     " au myac FileWritePost,BufWritePost *       AlpacaTagsUpdate -style
#     " au myac FileWritePost,BufWritePost Gemfile AlpacaTagsUpdateBundle
#     " au myac FileReadPost,BufEnter      *       AlpacaTagsSet
#   augroup END
# '''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['Tagbar', 'TagbarToggle', 'TagbarOpen', 'TagbarOpenAutoClose', 'TagbarShowTag', 'TagbarCurrentTag', 'TagbarGetTypeConfig', 'TagbarDebug', 'TagbarTogglePause']
on_func = 'tagbar#'
hook_add = '''
  nnoremap <silent>,t :<c-u>TagbarOpen<cr>

  let g:tagbar_type_go = {
    \   'ctagstype': 'go',
    \   'kinds': [
    \     'p:package',
    \     'i:imports:1',
    \     'c:constants',
    \     'v:variables',
    \     't:types',
    \     'n:interfaces',
    \     'w:fields',
    \     'e:embedded',
    \     'm:methods',
    \     'r:constructor',
    \     'f:functions'
    \   ],
    \   'sro': '.',
    \   'kind2scope': {
    \     't' : 'ctype',
    \     'n' : 'ntype'
    \   },
    \   'scope2kind': {
    \     'ctype' : 't',
    \     'ntype' : 'n'
    \   },
    \   'ctagsbin': 'gotags',
    \   'ctagsargs': '-sort -silent'
    \ }
'''


#operator

[[plugins]] # se evaluate textobj as expression of lambda of ruby
repo = 'rhysd/vim-operator-evalruby'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-evalruby)'

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c', 'cpp']
hook_add = '''
  let g:clang_format#command = 'clang-format'
  let g:clang_format#detect_style_file = 1
'''

[[plugins]] # <space>j <space>k
repo = 'osyo-manga/vim-operator-jump_side'
depends = 'vim-operator-user'
on_map  = '<Plug>(operator-jump'


#misc

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = '<Plug>'
on_path = '.*'
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_enable_clipboard = 0
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'
  let g:vimfiler_quick_look_command = 'xdg-open'
  let g:vimfiler_force_overwrite_statusline = 0

  " command! Vf VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit
  command! Vfe VimFiler -split -simple -find -winwidth=26 -no-quit
  command! Vfs VimFilerSplit
  command! Vft VimFilerTab
  command! Vf VimFiler
  command! Vimfiler Vf
  nnoremap <silent><c-W>e :Vfe<cr>
  nnoremap <silent><c-W><c-e> :Vfe<cr>
  nnoremap <space>ff :VimFiler<cr>
  nnoremap <space>ft :VimFilerTab<cr>
  nnoremap <space>fs :VimFilerSplit<cr>
  nnoremap <space>fe :Vfe<cr>
  " nnoremap <space><space> :Vfe<cr>
'''
hook_source = 'source ~/.vim/rc/vimfiler.rc.vim'

[[plugins]]
repo = 'sudo.vim'
on_cmd = ['SudoWrite', 'SudoRead']
hook_add = '''
  command! Sw silent SudoWrite %
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle', 'UndotreeShow']
hook_add = '''
  let g:undotree_WindowLayout = 3
  function g:Undotree_CustomMap()
    nmap <buffer> k <plug>UndotreeGoNextState
    nmap <buffer> j <plug>UndotreeGoPreviousState
    " nmap <buffer> K <plug>UndotreeGoNextSaved
    " nmap <buffer> J <plug>UndotreeGoPreviousState
  endfunc
'''

[[plugins]]
repo = 'sjl/gundo.vim'
# repo = 'dsummersl/gundo.vim'
on_cmd = ['GundoToggle', 'GundoShow']
hook_add = '''
  nnoremap ,ug :GundoToggle<cr>

  let g:gundo_right = 1
  " let g:gundo_preview_bottom = 1
  let g:gundo_width = 30 " float2nr(winwidth(0)*0.24)
  let g:gundo_preview_height = 20

  let g:gundo_help = 0
  " let gundo_disable
  let g:gundo_map_move_older = 'j'
  let g:gundo_map_move_newer = 'k'
  " let gundo_close_on_revert = 0
  " let gundo_preview_statusline
  " let gundo_tree_statusline
  let g:gundo_auto_preview = 1
  " let gundo_playback_delay = 60
  let g:gundo_return_on_revert = 0
  " let g:gundo_prefer_python3 = 1

  " dsummersl
  " let g:gundo_verbose_graph    = 1
  " let g:gundo_playback_delay   = 1
  " let g:gundo_mirror_graph     = 1
  " let g:gundo_inline_graph     = 0
'''


[[plugins]]
repo = 'rbtnn/vimconsole.vim'
on_cmd = ['VimConsoleOpen', 'VimConsoleToggle', 'VimConsoleLog']
on_map = '<Plug>(vimconsole_'
on_func = 'vimconsole#log'
hook_add = '''
  let g:vimconsole#auto_redraw = 1
  let g:vimconsole#height = 10
  let g:vimconsole#hooks = {}
  command! -nargs=1 ConsoleLog call vimconsole#log(<args>)
  command! Log VimConsoleOpen

  " function! g:vimconsole#hooks.on_logged(context)
  "   call vimconsole#winopen()
  " endfunction
'''

[[plugins]] # Beautiful indent of php and html.
repo = 'comeonly/php.vim-html-enhanced'
on_ft = ['php', 'html', 'xhtml']

[[plugins]] # To convert {range} mutually HTML and Entity.
repo = 'inotom/str2htmlentity'
on_cmd = ['Str2HtmlEntity', 'Entity2HtmlString']

[[plugins]]
repo = 'osyo-manga/vim-stargate'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'tkhren/vim-fake'
on_cmd = ['FakeSubstitute']
on_func = 'fake#'
hook_add = '''
  function! FakeArray(start, end, times) abort
    return join(map(range(a:times), printf('fake#int(%d, %d)', a:start, a:end)), ', ')
  endfunction

  function! FakeArrayI() abort
    let nums = split(input('> '))
    let len = len(nums)
    if 1 == len
      return FakeArray(0, 100, nums[0])
    elseif 3 == len
      return FakeArray(nums[0], nums[1], nums[2])
    endif
  endfunction
'''

[[plugins]] # Display unicode.
repo = 'osyo-manga/vim-hideout'
on_cmd = ['HideoutOn']

[[plugins]]
repo = 'lervag/vim-latex'
on_ft = ['tex', 'plaintex']

[[plugins]]
repo = 'xuhdev/vim-latex-live-preview'
on_ft = ['tex', 'plaintex']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xhtml', 'css']
hook_add = '''
  let g:user_emmet_mode = 'iv'
  let g:user_emmet_expandabbr_key = '<c-y><c-y>'
'''

[[plugins]]
repo = 'rbtnn/game_engine.vim'
on_cmd = 'GameEngineStartGame'

[[plugins]]
repo = 'rbtnn/mario.vim'
depends = 'game_engine.vim'
on_cmd = 'Mario'

[[plugins]]
repo = 'rbtnn/puyo.vim'
depends = 'game_engine.vim'
on_cmd = 'Puyo'

[[plugins]]
# コマのサイズはハードコーディング
repo = 'rbtnn/reversi.vim'
depends = 'game_engine.vim'
on_cmd = 'Reversi'

[[plugins]]
repo = 'thinca/vim-threes'
on_cmd = ['ThreesStart', 'ThreesShowRecord']
hook_add = '''
  let g:threes#data_directory = expand('~/.vim/tmp')
  let g:threes#start_with_higher_tile = 1
  command! Threes ThreesStart
'''

[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'

[[plugins]] # Markdownのリストをツリーにする
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'

[[plugins]]
repo = 'rhysd/try-colorscheme.vim'
on_cmd = 'TryColorscheme'

[[plugins]]
repo = 'uplus/colorsel.vim'
on_cmd = 'ColorSel'
