snippet fori
  for(int i = 0; i < ${1:count}; ++i){
    ${2}
  }

snippet fork
  for(int k = 0; k < ${1:count}; ++k){
    ${2}
  }

snippet foru
  for(unsigned i = 0; i < ${1:count}; ++i){
    ${2}
  }

snippet fors
  for(size_t i = 0; i < ${1:count}; ++i){
    ${2}
  }


snippet swapm
  #define swap(a,b){ int tmp; tmp=a; a=b; b=tmp; }

snippet swapf
  void swap(${1:int}* a, $1* b){
    $1 tmp = *a;
    *a = *b;
    *b = tmp;
  }

# sort
snippet sortfor
  for(int ${1:i} = 0; $1 < ${4:length}-1; ++$1){
    for(int ${2:k} = $1+1; $2 < $4; ++$2){
      if(${3:array}[$1] ${5:>} $3[$2]){
        int tmp = $3[$1];
        $3[$1] = $3[$2];
        $3[$2] = tmp;
      }
    }
  }
  ${0:code}


# output array
snippet outarray
  for(size_t i = 0; i < ${1:length}; ++i){
    printf("${2:%d }", ${3:array}[i]);
  }
  ${0}


# function pointer
snippet funcpoint
  ${1:return}(*${2:name})(${3:argments})

# quicksort
snippet qsortcmp
  int compare_${1:int}(const void* a, const void* b){
    return *(const $1*)a - *(const $1*)b;
  }
  ${0}

# qsort
snippet quicksort
  qsort(${1:array}, sizeof($1)/sizeof(${2:int}), sizeof($2), compare_$2);
  ${0}

snippet randint
  int randint(int min, int max){
      return rand() % (max-min+1) + min;
  }

#binary sort
#binary search

snippet printd
  printf("%d\n", ${1});
  ${0}

snippet input
  printf("${1} ");
  scanf("${2:%d}", ${3:&n});
  ${0}

snippet mnew
  #define mnew(type, size) (type*)(malloc_safe(sizeof(type)*(size)))
  #define mdelete(ptr) free(ptr); (ptr) = NULL;

  void* malloc_safe(size_t size){
    void* ptr = malloc(size);
    if(ptr == NULL){
      puts("malloc: memory allocation failed");
      exit(1);
    }
    return ptr;
  }

snippet inputd
  int inputd(const char* prompt){
    int n;
    printf("%s", prompt);
    scanf("%d", &n);
    return n;
  }

snippet inputs
  char* inputs(const char* prompt){
    static char tmp[MAX_TITLE];
    printf("%s", prompt);
    scanf("%s", tmp);
    return strcpy(mnew(char, strlen(tmp)+1), tmp);
  }
