## headers

snippet #!
options head
abbr    #!/usr/bin/env ruby
	#!/usr/bin/env ruby
	# frozen_string_literal: true
	${0}

snippet #frozen
options head
	# frozen_string_literal: true
	${0}


## statements

snippet ife
options head
	if ${1:#:condition}
		${2}
	else
		${3}
	end

snippet if2
options head
	if ${1:#:condition}
		${2}
	elsif ${3:#:condition}
		${4}
	end

snippet if3
options head
	if ${1:#:condition}
		${2}
	elsif ${3:#:condition}
		${4}
	else
		${5}
	end

snippet elsif
options head
	elsif ${1:#:condition}
		${0}

snippet case
options head
	case ${1}
	when ${2}
		${3}
	else
		${4:raise}
	end

snippet defs
options head
	def self.${1:#:class_method_name}
		${2}
	end

snippet rescue
options head
	rescue StandardError => e

snippet lambda
options word
alias lam
	->(${1}){ ${2} }

snippet lambda-keyword
options word
	lambda{|${1}| ${2} }


## class

snippet class
options head
alias cl
	class ${1:`vimrc#filename_mixedcase()`}
		${0}
	end

snippet class-initialize
options head
alias cli
	class ${1:`vimrc#filename_mixedcase()`}
		def initialize(${2})
			${3}
		end${0}
	end

snippet class-methods
options head
alias clm
	class << self
		def ${1}
			${0}
		end
	end

snippet class-error
options head
alias cle
	class ${1:`vimrc#filename_mixedcase()`} < StandardError; end

snippet class-error-graphql
options head
alias cleg
	class ${1:`vimrc#filename_mixedcase()`} < GraphQL::ExecutionError
		def initialize(${2})
			super(${3:$2})${0}
		end
	end

snippet class-delegate
options head
alias cld
abbr class .. < DelegateClass .. initialize .. end
	class ${1:`vimrc#filename_mixedcase()`} < DelegateClass(${2:#:ParentClass})
		def initialize(${3})
			super(${4})${0}
		end
	end

snippet def-initialize
options head
alias def-init
	def initialize(${1})
		${0}
	end

# LCでいいのでは
# snippet attr_reader
# options head
# alias attrr
# 	attr_reader :${1:attr_names}
#
# snippet attr_writer
# options head
# alias attrw
# 	attr_writer :${1:attr_names}
#
# snippet attr_accessor
# options head
# alias attra
# 	attr_accessor :${1:attr_names}

snippet def_delegator
options head
alias defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}

snippet def_delegators
options head
alias defds
	def_delegators :${1:@del_obj}, :${2:del_methods}


## module

snippet module
options head
alias md
	module ${1:`vimrc#filename_mixedcase()`}
		${0}
	end

snippet module-with-function
options head
alias mdwf
	module ${1:`vimrc#filename_mixedcase()`}
		module_function
		${0}
	end

snippet module_function
options head
alias mdf
	module_function


## method

snippet alias_method
options head
	alias_method :${1:new_name}, :${2:old_name}

snippet def-method_missing
options head
alias defmm
	def method_missing(meth, *args, &blk)
		${0}
	end



## shorthands

snippet struct
options word
	Struct.new(${0}, keyword_init: true)

snippet =begin
options head
	=begin
		${0}
	=end

snippet verbose
options head
	$VERBOSE = (ENV['DEBUG'].to_i == 0)? nil : true${0}

snippet deep_copy
options word
	Marshal.load(Marshal.dump(${1}))${0}

snippet json-parse-symbol
options word
alias jsps
	JSON.parse(${1}, { symbolize_names: true })${0}

snippet .inject
options word
	.inject(${1:init}){|${2:memo}, ${3:obj}| ${4} }

snippet .each_with_index
options word
alias .ewi
	.each_with_index {|${1}| ${0} }

snippet .each_with_object
options word
alias .ewo
	.each_with_object(${1}) {|${2:value}, ${3:memo}| ${0} }

snippet array-nest
options word
	Array.new(${1:size}) { Array.new(${2:size}) }


## debug helper

snippet .pretty_inspect
options word
alias .pi
	.pretty_inspect

snippet .taputs
options word
	.tap(&method(:puts))${0}

snippet .tapp
	.tap(&method(:pp))${0}

snippet mylog
options head
	File.open('mylog', 'w') {|f| f.puts ${0} }

snippet marshal-dump-file
options head
	File.open(${1:"path/to/file.dump"}, "wb"){|${2:file}| Marshal.dump(${3:obj}, $2) }${4}

snippet marshal-load-file
options head
	File.open(${1:"path/to/file.dump"}, "rb"){|${2:file}| Marshal.load($2) }${3}

snippet irb
options head
	binding.irb

snippet pry
options head
	require 'pry'; binding.pry
	puts '[*] end binding'

snippet debug
options head
	rescue => e # TODO debug
		puts e.message, e.backtrace
	ensure
		binding.irb

snippet debug-file
options head
	rescue => e
		File.open('tmp/error', 'a'){|file| file.write(e)}


## Rubocop

snippet rubocop-disable-range
options head
	# rubocop:disable ${1}
	${0}
	# rubocop:enable $1

snippet rubocop-disable-line
options word
abbr rubocop-disable-line(rcd)
alias rcd
	# rubocop:disable ${0}

snippet cop-m-cl
	rubocop:disable Metrics/ClassLength

snippet cop-m-ll
	rubocop:disable Metrics/LineLength

snippet cop-m-bl
	rubocop:disable Metrics/BlockLength


## Rails

snippet rails-logger-debug
options word
alias rld
	Rails.logger.debug ${0}

snippet rld-
options word
	Rails.logger.debug "---------- ${0}".red

snippet rldm
options word
	Rails.logger.debug "---------- called: #{self}.#{__method__} L#{__LINE__}".red${0}

### Active Record

snippet class-ar-model
options head
	class ${1:`vimrc#filename_mixedcase()`} < ${2:ApplicationRecord}
		${0}
	end

snippet enum
options head
	enum ${1}: { ${0} }, _prefix: true

snippet belongs_to
options head
	belongs_to :${1}, optional: false
snippet has_one
options head
	has_one :${1}, dependent: :destroy, class_name: ${2}
snippet has_many
options head
	has_many :${1}, dependent: :destroy, class_name: ${2}

snippet has_one_through
options head
	has_one :${1} through: :${2}
snippet has_many_through
options head
	has_many :${1} through: :${2}

### Active Record Migrations https://railsguides.jp/active_record_migrations.html

snippet create_table
options head
	create_table ${1}, id: :uuid do |t|
		${0}
		t.timestamps null: false
	end

snippet change_table
options head
	change_table ${1:#:table(plural)} do |t|
		${0}
	end

snippet t.index
options head
	t.index %i[${1:#:columns}], unique: true
snippet t.remove_index
options head
	t.remove_index :${1:#:name}
snippet add_index
options head
	add_index :${1:#:table(plural)}, %i[${2:#:columns}]${3:, unique: true}
snippet remove_index
options head
	remove_index :${1:#:table(plural)}, column: %i[${2:#:columns}]

snippet t.references
options head
alias t.ref
	t.references :${1:#:column}, type: :uuid, null: false, foreign_key: { to_table: :${2:#:to_table(plural)} }, index: { unique: true }
snippet add_reference
options head
	add_reference :${1:#:table(plural)}, :${2:#:column}, type: :uuid, null: false, foreign_key: { to_table: :${3:#:to_table(plural)} }, index: { unique: true, name: :${4:#:like a :table_column_index} }
snippet remove_reference
options head
	remove_reference :${1:#:table(plural)}, :${2:#:column}, type: :uuid, null: false, foreign_key: { to_table: :${3:#:to_table(plural)} }, index: { unique: true, name: :${4:#:like a :table_column_index} }

snippet add_foreign_key
options head
	add_foreign_key :${1:#:table(plural)}, :${2:#:column}, ${3:#:name: name}
snippet remove_foreign_key
options head
	remove_foreign_key :${1:#:table(plural)}, :${2:#:column}, ${3:#:name: name}

snippet t.column
options head
alias t.col
	t.column :${1:#:column}, :${2:#:type}, null: false${3:, default: nil}
snippet add_column
options head
	add_column :${1:#:table(plural)}, :${2:#:column}, :${3:#:type}, null: false${4:, default: nil}
snippet remove_column
options head
	remove_column :${1:#:table(plural)}, :${2:#:column}, :${3:#:type}, null: false${4:, default: nil}

snippet rename_column
options head
	rename_column :${1:#:table(plural)}, :${2:#:old_name}, :${3:#:new_name}
snippet change_column_null
options head
	change_column_null :${1:#:table(plural)}, :${2:#:column}, ${3:#:nullify}, ${4:#:default}
snippet change_column_default
options head
	change_column_default :${1:#:table(plural)}, :${2:#:column}, from: ${3} to: ${4}


## RSpec

snippet irb-rspec
options head
	after(:each) do |example|
		require 'irb'; binding.irb
		puts '[*] end binding'
	end

## Rake

snippet task
options head
	desc "${1:Task description\}"
	task :${2:task_name => [:dependent, :tasks]} do
		${0}
	end


## Hanami

snippet hld
options word
	Hanami.logger.debug ${0}

snippet hldm
options word
	Hanami.logger.debug "---------- called: #{self}.#{__method__} L#{__LINE__}"${0}

snippet hldp
options word
	warn "---------- #{Process.pid} | #{Time.now.strftime('%T.%L')} | #{__FILE__}:#{__LINE__} | #{self}.#{__method__}"

## utils

snippet script_dir
options word
	__dir__

snippet getints
options head
	gets.split.map(&:to_i)${0}

# unix filter{}
snippet argf
options head
alias unif
	ARGF.each_line${1} do |${2:line}|
		${0}
	end

snippet cli-usage
options head
	if ARGV.${1}
		abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
	end

snippet fileopen
options head
alias open
abbr File.open(filename) do ... end
	File.open(${1:#:filename}, '${2:#:mode}') do |${3:file}|
		${0}
	end

snippet urlencode
options word
	ERB::Util.url_encode(${1})

snippet main
options head
	if __FILE__ == \$0
		${0}
	end

snippet dir-glob
options head
	Dir.glob(${1:'**/*'}) do |name|
		${0}
	end

snippet options-parse
options head
	require "optparse"

	options = {${1:default => "args"}}

	ARGV.options do |opts|
		opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}
	end

snippet options-on
	opts.on( "-${1}", "--${2:long-option-name}", ${3:String}, "${4:Option description.}") do |${5:opt}|
		${6}
	end


## define helper methods

snippet def-deep_copy
	def deep_copy(obj)
		Marshal.load(Marshal.dump(obj))
	end${0}

snippet def-int?
	class String
		def int?
			Integer(self) && true rescue false
		end
	end
	${0}

snippet def-puts_color
	def puts_color(color_num, str)
		puts "\e[38;5;#{color_num}m#{str}\e[00m"
	end

snippet def-capture_stdout
	def capture_stdout
		$stdout = out = StringIO.new
		yield
		return out.string
	ensure
		$stdout = STDOUT
	end

snippet def-pager
	def pager
		$stdout = out = StringIO.new
		return yield
	ensure
		$stdout = STDOUT
		opt='--RAW-CONTROL-CHARS --quit-if-one-screen --no-init'
		IO.popen(['less', opt], 'w'){|f| f.puts out.string }
	end


## 未振り分け

